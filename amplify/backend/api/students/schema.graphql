enum Country {
    AF
    AL
    DZ
    AD
    AO
    AG
    AR
    AM
    AU
    AT
    AZ
    BS
    BH
    BD
    BB
    BY
    BE
    BZ
    BJ
    BT
    BO
    BA
    BW
    BR
    BG
    BF
    BI
    KH
    CM
    CA
    CV
    CF
    TD
    CL
    CN
    CO
    KM
    CG
    CD
    CR
    CI
    HR
    CU
    CY
    CZ
    DK
    DJ
    DM
    DO
    EC
    EG
    SV
    GQ
    ER
    EE
    ET
    FJ
    FI
    FR
    GA
    GM
    GE
    DE
    GH
    GR
    GD
    GP
    GT
    GN
    GW
    GY
    HT
    VA
    HN
    HK
    HU
    IS
    IN
    ID
    IR
    IQ
    IE
    IL
    IT
    JM
    JP
    JO
    KZ
    KE
    KI
    KP
    KR
    KW
    KG
    LA
    LV
    LB
    LS
    LR
    LY
    LI
    LT
    LU
    MO
    MK
    MG
    MW
    MY
    MV
    ML
    MT
    MH
    MR
    MU
    MX
    FM
    MD
    MC
    MN
    ME
    MA
    MZ
    MM
    NA
    NR
    NP
    NL
    NZ
    NI
    NE
    NG
    NO
    OM
    PK
    PW
    PS
    PA
    PG
    PY
    PE
    PH
    PL
    PT
    QA
    RO
    RU
    RW
    KN
    LC
    VC
    WS
    SM
    ST
    SA
    SN
    RS
    SC
    SL
    SG
    SK
    SI
    SB
    SO
    ZA
    SS
    ES
    LK
    SD
    SR
    SE
    CH
    SY
    TW
    TJ
    TZ
    TH
    TL
    TG
    TO
    TT
    TN
    TR
    TM
    TV
    UG
    UA
    AE
    GB
    US
    UY
    UZ
    VU
    VE
    VN
    YE
    ZM
    ZW
}

enum ContractStatus {
    PRIORITY
    CONTACTED
    IN_NEGOCIATION
    SIGNED
}

enum Currency {
    CHF
    CNY
    EUR
    GBP
}

enum Degree {
    BACHELOR
    MASTER
    DOCTORATE
}

enum Discipline {
    BUSINESS_MANAGEMENT_AND_ECONOMICS
    ENGINEERING_AND_TECHNOLOGY
    SCIENCES
    CULINARY_ARTS
    LAW_POLITICS_SOCIAL_COMMUNITY_SERVICE_AND_TEACHING
    ARTS
    HEALTH_SCIENCES_MEDICINE_NURSING_PARAMEDIC_AND_KINESIOLOGY
    ENGLISH_FOR_ACADEMIC_STUDIES
}

enum DurationUnit {
    DAY
    MONTH
    YEAR
    WEEK
}

enum FeeUnit {
    ANNUAL
    TOTAL
}

enum InstitutionType {
    PRIVATE
    PUBLIC
}

enum Language {
    AF
    SQ
    AR
    HY
    EU
    BN
    BG
    CA
    KM
    ZH
    HR
    CS
    DA
    NL
    EN
    ET
    FJ
    FI
    FR
    KA
    DE
    EL
    GU
    HE
    HI
    HU
    IS
    ID
    GA
    IT
    JA
    JW
    KO
    LA
    LV
    LT
    MK
    MS
    ML
    MT
    MI
    MR
    MN
    NE
    NO
    FA
    PL
    PT
    PA
    QU
    RO
    RU
    SM
    SR
    SK
    SL
    ES
    SW
    SV
    TA
    TT
    TE
    TH
    BO
    TO
    TR
    UK
    UR
    UZ
    VI
    CY
    XH
}

enum Schedule {
    FULL_TIME
    PART_TIME
}

type School
    @auth(
        rules: [
            { allow: public, operations: [read], provider: apiKey }
            { allow: private, operations: [read] }
            { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
        ]
    )
    @model
    @searchable
    @key(name: "bySlug", fields: ["slug"], queryField: "getSchoolBySlug") {
    city: String!
    country: Country!
    coverPhoto: String!
    contactEmail: String
    contactJobTitle: String
    contactName: String
    contactPhone: String
    creationYear: String!
    description: String
    id: ID!
    institutionType: InstitutionType!
    internationalStudents: Float!
    logo: String!
    name: String!
    totalStudents: Float!
    slug: String!
    published: Boolean!
    programs: [Program] @connection(keyName: "bySchool", fields: ["id"])
    stepsTemplates: [ApplicationStepsTemplate]!
    contractStatus: String!
}

type ApplicationStepsTemplate {
    targets: [String]
    steps: [ApplicationStep]
}

type Program
    @auth(
        rules: [
            { allow: public, operations: [read], provider: apiKey }
            { allow: private, operations: [read] }
            { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
        ]
    )
    @model
    @searchable
    @key(name: "bySlug", fields: ["slug"], queryField: "getProgramBySlug")
    @key(name: "bySchool", fields: ["schoolId"], queryField: "getProgramBySchool") {
    applicationFee: Float!
    applicationFeeCurrency: Currency!
    city: String!
    costOfLiving: Float!
    costOfLivingCurrency: Currency!
    country: Country!
    degree: Degree!
    description: String
    discipline: Discipline!
    duration: Float!
    durationUnit: DurationUnit!
    fee: Float!
    feeCurrency: Currency!
    feeUnit: FeeUnit!
    feesAndFinancing: String
    gradePointAverage: Float!
    highestEducationLevel: Float!
    id: ID!
    intakeInformation: String
    intakes: String!
    languages: [Language]!
    minimumAge: Float!
    minimumWorkExperience: Float!
    minimumWorkExperienceUnit: DurationUnit!
    name: String!
    otherRequirements: String
    published: Boolean!
    requestedDocuments: [RequestedDocument]!
    schedule: Schedule!
    school: School @connection(fields: ["schoolId"])
    schoolId: ID!
    schoolName: String!
    slug: String!
    submissionDeadline: String!
    testCambridgeAdvanced: Float!
    testCambridgeFirst: Float!
    testDelfdalf: Float!
    testGmat: Float!
    testGre: Float!
    testIelts: Float!
    testTagemage: Float!
    testTcftef: Float!
    testToefl: Float!
    testToeic: Float!
}

type RequestedDocument {
    name: String
    isMandatory: Boolean
    storageKey: String
    description: String
    condition: String
    isSpecific: Boolean
}

type Student
    @auth(
        rules: [
            { allow: owner, operations: [create, update, read] }
            { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
        ]
    )
    @model
    @key(name: "byEmail", fields: ["email"], queryField: "getStudentByEmail") {
    id: ID!
    email: String
    phoneNumber: String
    address: String
    city: String
    country: String
    firstName: String
    middleName: String
    lastName: String
    birthday: String
    firstLanguage: String
    passportNumber: String
    gender: String
    maritalStatus: String
    fatherFirstName: String
    fatherLastName: String
    motherFirstName: String
    motherMaidenName: String
    guardianLastName: String
    guardianFirstName: String
    parentsAddress: String
    parentsCity: String
    parentsCountry: String
    parentsPhoneNumber: String
    parentsEmail: String
    disciplines: [String]
    degrees: [String]
    nationality: String
    educationCountry: String
    highestEducationLevel: Float
    gradePointAverage: Float
    schoolsAttended: [SchoolAttended]
    testToefl: Float
    testIelts: Float
    testToeic: Float
    testTcftef: Float
    testDelfdalf: Float
    testGre: Float
    testGmat: Float
    testTagemage: Float
    testCambridgeFirst: Float
    testCambridgeAdvanced: Float
    testToeflDate: String
    testIeltsDate: String
    testToeicDate: String
    testTcftefDate: String
    testDelfdalfDate: String
    testGreDate: String
    testGmatDate: String
    testTagemageDate: String
    testCambridgeFirstDate: String
    testCambridgeAdvancedDate: String
    testEnglishPending: Boolean
    testFrenchPending: Boolean
    testLogicAndReasoningPending: Boolean
    validVisa: Boolean
    refusedVisa: Boolean
    refusedVisaReason: String
    workExperiences: [WorkExperience]
    documents: [Document] @connection(keyName: "byStudent", fields: ["id"])
    favoritePrograms: [String]
    favoriteSchools: [String]
    applications: [Application] @connection(keyName: "byStudent", fields: ["id"])
    hasMandatoryDocuments: Boolean
    modalProfileCompletedViewed: Boolean
    notifications: [Notification]
    locale: String
}

type SchoolAttended {
    name: String
    address: String
    city: String
    country: String
    primaryLanguageInstruction: String
    educationLevel: Float
    degreeAwarded: Float
    degreeAwardedOn: String
    attendedInstitutionFrom: String
    attendedInstitutionTo: String
}

type WorkExperience {
    title: String
    compagnyName: String
    address: String
    workedFrom: String
    workedTo: String
}

type Document
    @auth(
        rules: [
            { allow: owner, operations: [create, update, read, delete] }
            { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
        ]
    )
    @model
    @key(name: "byStudent", fields: ["studentId"], queryField: "getDocumentByStudent")
    @key(name: "byStorageKey", fields: ["storageKey"], queryField: "getDocumentByStorageKey") {
    id: ID!
    studentId: ID!
    student: Student @connection(fields: ["studentId"])
    name: String
    storageKey: String
}

type Application
    @auth(
        rules: [
            { allow: owner, operations: [create, update, read, delete] }
            { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
        ]
    )
    @model
    @key(name: "byStudent", fields: ["studentId"], queryField: "getApplicationByStudent") {
    id: ID!
    studentId: ID!
    student: Student @connection(fields: ["studentId"])
    programId: ID!
    program: Program @connection(fields: ["programId"])
    intake: String
    document: String
    steps: [ApplicationStep]
    interviewDate: String
    admissionResult: String
    tuitionsFeePaymentDate: String
    decisionLetterDate: String
    visaDate: String
    todo: String
    notifications: [Notification]
    modalApplicationCompletedViewed: Boolean
}

type ApplicationStep {
    id: String!
    status: String
    date: String
    isMandatory: Boolean
}

type Notification {
    title: String
    titleOptions: String
    description: String
    descriptionOptions: String
    date: String
    seen: Boolean
    link: String
}

type SearchAlert
    @auth(
        rules: [
            { allow: owner, operations: [create, update, read, delete] }
            { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
        ]
    )
    @model {
    id: ID!
    query: String
    type: String
    studentId: ID!
    student: Student @connection(fields: ["studentId"])
}

type Feedback
    @auth(
        rules: [
            { allow: owner, operations: [create, update, read] }
            { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
        ]
    )
    @model {
    id: ID!
    rating: Float
    applicationId: ID!
    application: Application @connection(fields: ["applicationId"])
}

type Post
    @auth(
        rules: [
            { allow: public, operations: [read], provider: apiKey }
            { allow: private, operations: [read] }
            { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
        ]
    )
    @model
    @key(name: "bySlug", fields: ["slug"], queryField: "getPostBySlug") {
    category: String!
    content: String!
    id: ID!
    published: Boolean!
    slug: String!
    title: String!
}

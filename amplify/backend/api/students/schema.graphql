type School
    @auth(
        rules: [
            { allow: public, operations: [read], provider: apiKey }
            { allow: private, operations: [read] }
            { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
        ]
    )
    @model
    @searchable
    @key(name: "bySlug", fields: ["slug"], queryField: "getSchoolBySlug") {
    id: ID!
    city: String!
    country: String!
    coverPhoto: String!
    contactEmail: String
    contactJobTitle: String
    contactName: String
    contactPhone: String
    contractStatus: String!
    creationYear: Float!
    description: String
    institutionType: String!
    internationalStudents: Float!
    lastUpdate: Float!
    logo: String!
    name: String!
    totalStudents: Float!
    slug: String!
    published: Boolean!
    programs: [Program] @connection(keyName: "bySchool", fields: ["id"])
}

type Program
    @auth(
        rules: [
            { allow: public, operations: [read], provider: apiKey }
            { allow: private, operations: [read] }
            { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
        ]
    )
    @model
    @searchable
    @key(name: "bySlug", fields: ["slug"], queryField: "getProgramBySlug")
    @key(name: "bySchool", fields: ["schoolId"], queryField: "getProgramBySchool") {
    id: ID!
    applicationFee: Float!
    applicationFeeCurrency: String!
    city: String!
    costOfLiving: Float!
    costOfLivingCurrency: String!
    country: String!
    degree: String!
    description: String
    discipline: String!
    duration: Float!
    durationUnit: String!
    fee: Float!
    feeCurrency: String!
    feeUnit: String!
    feesAndFinancing: String
    gradePointAverage: Float!
    highestEducationLevel: Float!
    intakeInformation: String
    intakes: String!
    languages: [String]!
    lastUpdate: Float!
    minimumAge: Float!
    minimumWorkExperience: Float!
    minimumWorkExperienceUnit: String!
    name: String!
    otherRequirements: String
    published: Boolean!
    requestedDocuments: [RequestedDocument]!
    schedule: String!
    school: School @connection(fields: ["schoolId"])
    schoolId: ID!
    schoolName: String!
    slug: String!
    submissionDeadline: String!
    testCambridgeAdvanced: Float!
    testCambridgeFirst: Float!
    testCeliCilsItPlida: Float!
    testDele: Float!
    testDelfdalf: Float!
    testGmat: Float!
    testGoethe: Float!
    testGre: Float!
    testIelts: Float!
    testTagemage: Float!
    testTcftef: Float!
    testToefl: Float!
    testToeic: Float!
}

type RequestedDocument {
    name: String
    isMandatory: Boolean
    storageKey: String
    description: String
    condition: String
    isSpecific: Boolean
}

type Student
    @auth(
        rules: [
            { allow: owner, operations: [create, update, read] }
            { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
        ]
    )
    @model
    @searchable
    @key(name: "byEmail", fields: ["email"], queryField: "getStudentByEmail") {
    id: ID!
    address: String
    applications: [Application] @connection(keyName: "byStudent", fields: ["id"])
    birthday: String
    city: String
    country: String
    degrees: [String]
    disciplines: [String]
    documents: [Document] @connection(keyName: "byStudent", fields: ["id"])
    educationCountry: String
    email: String
    fatherFirstName: String
    fatherLastName: String
    firstLanguage: String
    firstName: String
    favoritePrograms: [String]
    favoriteSchools: [String]
    gender: String
    gradePointAverage: Float
    guardianFirstName: String
    guardianLastName: String
    hasMandatoryDocuments: Boolean
    highestEducationLevel: Float
    lastName: String
    lastUpdate: Float!
    locale: String
    maritalStatus: String
    middleName: String
    modalProfileCompletedViewed: Boolean
    phoneNumber: String
    motherFirstName: String
    motherMaidenName: String
    nationality: String
    notifications: [Notification]
    parentsAddress: String
    parentsCity: String
    parentsCountry: String
    parentsEmail: String
    parentsPhoneNumber: String
    passportNumber: String
    refusedVisa: Boolean
    refusedVisaReason: String
    schoolsAttended: [SchoolAttended]
    testCambridgeAdvanced: Float
    testCambridgeAdvancedDate: String
    testCambridgeFirst: Float
    testCambridgeFirstDate: String
    testCeliCilsItPlida: Float
    testCeliCilsItPlidaDate: String
    testDele: Float
    testDeleDate: String
    testDelfdalf: Float
    testDelfdalfDate: String
    testEnglishPending: Boolean
    testGmat: Float
    testGmatDate: String
    testGoethe: Float
    testGoetheDate: String
    testGre: Float
    testGreDate: String
    testIelts: Float
    testIeltsDate: String
    testLogicAndReasoningPending: Boolean
    testOtherLanguagesPending: Boolean
    testTagemage: Float
    testTagemageDate: String
    testTcftef: Float
    testTcftefDate: String
    testToefl: Float
    testToeflDate: String
    testToeic: Float
    testToeicDate: String
    validVisa: Boolean
    workExperiences: [WorkExperience]
}

type SchoolAttended {
    address: String
    attendedInstitutionFrom: String
    attendedInstitutionTo: String
    city: String
    country: String
    degreeAwarded: Float
    degreeAwardedOn: String
    educationLevel: Float
    name: String
    primaryLanguageInstruction: String
}

type WorkExperience {
    address: String
    compagnyName: String
    title: String
    workedFrom: String
    workedTo: String
}

type Document
    @auth(
        rules: [
            { allow: owner, operations: [create, update, read, delete] }
            { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
        ]
    )
    @model
    @key(name: "byStudent", fields: ["studentId"], queryField: "getDocumentByStudent")
    @key(name: "byStorageKey", fields: ["storageKey"], queryField: "getDocumentByStorageKey") {
    id: ID!
    studentId: ID!
    student: Student @connection(fields: ["studentId"])
    name: String
    storageKey: String
}

type Application
    @auth(
        rules: [
            { allow: owner, operations: [create, update, read, delete] }
            { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
        ]
    )
    @model
    @searchable
    @key(name: "byStudent", fields: ["studentId"], queryField: "getApplicationByStudent") {
    id: ID!
    admissionResult: String
    document: String
    decisionLetterDate: String
    intake: String!
    interviewDate: String
    lastUpdate: Float!
    modalApplicationCompletedViewed: Boolean!
    notifications: [Notification]
    program: Program @connection(fields: ["programId"])
    programId: ID!
    steps: [ApplicationStep]
    studentId: ID!
    student: Student @connection(fields: ["studentId"])
    todo: String
    tuitionsFeePaymentDate: String
    visaDate: String
}

type ApplicationStep {
    id: String!
    date: String!
    isMandatory: Boolean!
    status: String!
}

type Notification {
    date: String!
    description: String!
    descriptionOptions: String!
    link: String!
    seen: Boolean!
    title: String!
    titleOptions: String!
}

type SearchAlert
    @auth(
        rules: [
            { allow: owner, operations: [create, update, read, delete] }
            { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
        ]
    )
    @model {
    id: ID!
    lastUpdate: Float!
    student: Student @connection(fields: ["studentId"])
    studentId: ID!
    type: String!
    query: String!
}

type Feedback
    @auth(
        rules: [
            { allow: owner, operations: [create, update, read] }
            { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
        ]
    )
    @model {
    id: ID!
    application: Application @connection(fields: ["applicationId"])
    applicationId: ID!
    lastUpdate: Float!
    rating: Float!
}

type Post
    @auth(
        rules: [
            { allow: public, operations: [read], provider: apiKey }
            { allow: private, operations: [read] }
            { allow: groups, groups: ["admin"], operations: [create, update, read, delete] }
        ]
    )
    @model
    @key(name: "bySlug", fields: ["slug"], queryField: "getPostBySlug") {
    id: ID!
    category: String!
    content: String!
    lastUpdate: Float!
    published: Boolean!
    slug: String!
    title: String!
}

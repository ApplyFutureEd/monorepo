{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable @typescript-eslint/ban-types */\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { isArray, mergeWith } from 'lodash';\nimport { useState } from 'react';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\n\nvar customizer = function customizer(objValue, srcValue) {\n  if (isArray(objValue)) {\n    return objValue.concat(srcValue);\n  }\n};\n\nexport var useQuery = function useQuery(query, variables) {\n  _s();\n\n  var _useState = useState(true),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var _useState2 = useState(''),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState({}),\n      data = _useState3[0],\n      setData = _useState3[1];\n\n  var fetchQuery = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(query, variables, nextToken) {\n      var _ref2, _data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              setIsLoading(true);\n              _context.next = 4;\n              return API.graphql(graphqlOperation(query, _objectSpread(_objectSpread({}, variables), {}, {\n                nextToken: nextToken\n              })));\n\n            case 4:\n              _ref2 = _context.sent;\n              _data = _ref2.data;\n\n              if (nextToken) {\n                setData(function (prevData) {\n                  return mergeWith(prevData, _data, customizer);\n                });\n              } else {\n                setData(_data);\n              }\n\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              setError(_context.t0);\n\n            case 12:\n              _context.prev = 12;\n              setIsLoading(false);\n              return _context.finish(12);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9, 12, 15]]);\n    }));\n\n    return function fetchQuery(_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var fetchMore = function fetchMore(nextToken) {\n    fetchQuery(query, variables, nextToken);\n  };\n\n  var refetch = function refetch() {\n    fetchQuery(query, variables);\n  };\n\n  useDeepCompareEffect(function () {\n    fetchQuery(query, variables);\n  }, [query, variables]);\n  return {\n    data: data,\n    error: error,\n    fetchMore: fetchMore,\n    isLoading: isLoading,\n    refetch: refetch\n  };\n};\n\n_s(useQuery, \"LBjJ9uGeKbMlTI3A12UWJ7kJfmY=\", false, function () {\n  return [useDeepCompareEffect];\n});","map":{"version":3,"sources":["/home/paul/projects/applyfuture/students/node_modules/@applyfuture/utils/src/hooks/useQuery.tsx"],"names":["API","graphqlOperation","isArray","mergeWith","useState","useDeepCompareEffect","customizer","objValue","srcValue","concat","useQuery","query","variables","isLoading","setIsLoading","error","setError","data","setData","fetchQuery","nextToken","graphql","prevData","fetchMore","refetch"],"mappings":";;;;;;;;;;AAAA;AACA,SAASA,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,QAAnC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;;AAUA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,QAAD,EAAgBC,QAAhB,EAAkC;AACjD,MAAIN,OAAO,CAACK,QAAD,CAAX,EAAuB;AACnB,WAAOA,QAAQ,CAACE,MAAT,CAAgBD,QAAhB,CAAP;AACH;AACJ,CAJD;;AAMA,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,CACpBC,KADoB,EAEpBC,SAFoB,EAGO;AAAA;;AAAA,kBACOR,QAAQ,CAAC,IAAD,CADf;AAAA,MACpBS,SADoB;AAAA,MACTC,YADS;;AAAA,mBAEDV,QAAQ,CAAC,EAAD,CAFP;AAAA,MAEpBW,KAFoB;AAAA,MAEbC,QAFa;;AAAA,mBAGHZ,QAAQ,CAAC,EAAD,CAHL;AAAA,MAGpBa,IAHoB;AAAA,MAGdC,OAHc;;AAK3B,MAAMC,UAAU;AAAA,wEAAG,iBAAOR,KAAP,EAAsBC,SAAtB,EAAiDQ,SAAjD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEXN,cAAAA,YAAY,CAAC,IAAD,CAAZ;AAFW;AAAA,qBAGad,GAAG,CAACqB,OAAJ,CACpBpB,gBAAgB,CAACU,KAAD,kCAAaC,SAAb;AAAwBQ,gBAAAA,SAAS,EAATA;AAAxB,iBADI,CAHb;;AAAA;AAAA;AAGHH,cAAAA,KAHG,SAGHA,IAHG;;AAQX,kBAAIG,SAAJ,EAAe;AACXF,gBAAAA,OAAO,CAAC,UAACI,QAAD;AAAA,yBAAcnB,SAAS,CAACmB,QAAD,EAAWL,KAAX,EAAiBX,UAAjB,CAAvB;AAAA,iBAAD,CAAP;AACH,eAFD,MAEO;AACHY,gBAAAA,OAAO,CAACD,KAAD,CAAP;AACH;;AAZU;AAAA;;AAAA;AAAA;AAAA;AAcXD,cAAAA,QAAQ,aAAR;;AAdW;AAAA;AAgBXF,cAAAA,YAAY,CAAC,KAAD,CAAZ;AAhBW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAVK,UAAU;AAAA;AAAA;AAAA,KAAhB;;AAoBA,MAAMI,SAAS,GAAG,SAAZA,SAAY,CAACH,SAAD,EAAuB;AACrCD,IAAAA,UAAU,CAACR,KAAD,EAAQC,SAAR,EAAmBQ,SAAnB,CAAV;AACH,GAFD;;AAIA,MAAMI,OAAO,GAAG,SAAVA,OAAU,GAAM;AAClBL,IAAAA,UAAU,CAACR,KAAD,EAAQC,SAAR,CAAV;AACH,GAFD;;AAIAP,EAAAA,oBAAoB,CAAC,YAAM;AACvBc,IAAAA,UAAU,CAACR,KAAD,EAAQC,SAAR,CAAV;AACH,GAFmB,EAEjB,CAACD,KAAD,EAAQC,SAAR,CAFiB,CAApB;AAIA,SAAO;AACHK,IAAAA,IAAI,EAAJA,IADG;AAEHF,IAAAA,KAAK,EAALA,KAFG;AAGHQ,IAAAA,SAAS,EAATA,SAHG;AAIHV,IAAAA,SAAS,EAATA,SAJG;AAKHW,IAAAA,OAAO,EAAPA;AALG,GAAP;AAOH,CA/CM;;GAAMd,Q;UAoCTL,oB","sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { isArray, mergeWith } from 'lodash';\nimport { useState } from 'react';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\n\ntype UseQueryType<ResultType> = {\n    data: ResultType;\n    error: any;\n    fetchMore: (nextToken: string) => void;\n    isLoading: boolean;\n    refetch: () => void;\n};\n\nconst customizer = (objValue: any, srcValue: any) => {\n    if (isArray(objValue)) {\n        return objValue.concat(srcValue);\n    }\n};\n\nexport const useQuery = <ResultType extends {}, VariablesType extends {} = {}>(\n    query: string,\n    variables?: VariablesType\n): UseQueryType<ResultType> => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState('');\n    const [data, setData] = useState({} as ResultType);\n\n    const fetchQuery = async (query: string, variables?: VariablesType, nextToken?: string) => {\n        try {\n            setIsLoading(true);\n            const { data } = (await API.graphql(\n                graphqlOperation(query, { ...variables, nextToken })\n            )) as {\n                data: ResultType;\n            };\n            if (nextToken) {\n                setData((prevData) => mergeWith(prevData, data, customizer));\n            } else {\n                setData(data);\n            }\n        } catch (error) {\n            setError(error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const fetchMore = (nextToken: string) => {\n        fetchQuery(query, variables, nextToken);\n    };\n\n    const refetch = () => {\n        fetchQuery(query, variables);\n    };\n\n    useDeepCompareEffect(() => {\n        fetchQuery(query, variables);\n    }, [query, variables]);\n\n    return {\n        data,\n        error,\n        fetchMore,\n        isLoading,\n        refetch\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/paul/projects/applyfuture/students/packages/students/src/components/programs/search/Search.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Input } from '@applyfuture/ui';\nimport { faSearch } from '@fortawesome/pro-light-svg-icons';\nimport { Field, Form, Formik } from 'formik';\nimport useTranslation from 'next-translate/useTranslation';\nimport { object, string } from 'yup';\n\nvar Search = function Search(props) {\n  _s();\n\n  var handleSearch = props.handleSearch;\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var validationSchema = object().shape({\n    query: string()\n  });\n  var initialValues = {\n    query: ''\n  };\n\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values, actions) {\n      var query;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              query = values.query;\n              handleSearch(query);\n              actions.setSubmitting(false);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onSubmit(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: onSubmit,\n    children: function children() {\n      return /*#__PURE__*/_jsxDEV(Form, {\n        children: /*#__PURE__*/_jsxDEV(Field, {\n          id: \"query\",\n          name: \"query\",\n          children: function children(fieldProps) {\n            return /*#__PURE__*/_jsxDEV(Input, _objectSpread({\n              debounce: 2000,\n              placeholder: t('programs:search-placeholder'),\n              startIcon: faSearch\n            }, fieldProps), void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 33\n            }, _this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, _this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Search, \"zlIdU9EjM2llFt74AbE2KsUJXyM=\", false, function () {\n  return [useTranslation];\n});\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/home/paul/projects/applyfuture/students/packages/students/src/components/programs/search/Search.tsx"],"names":["Input","faSearch","Field","Form","Formik","useTranslation","object","string","Search","props","handleSearch","t","validationSchema","shape","query","initialValues","onSubmit","values","actions","setSubmitting","fieldProps"],"mappings":";;;;;;;;;;;;;AAAA,SAASA,KAAT,QAAsB,iBAAtB;AACA,SAASC,QAAT,QAAyB,kCAAzB;AACA,SAASC,KAAT,EAA4BC,IAA5B,EAAkCC,MAAlC,QAA+D,QAA/D;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AAEA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,KAA/B;;AAMA,IAAMC,MAAiB,GAAG,SAApBA,MAAoB,CAACC,KAAD,EAAW;AAAA;;AAAA,MACzBC,YADyB,GACRD,KADQ,CACzBC,YADyB;;AAAA,wBAEnBL,cAAc,EAFK;AAAA,MAEzBM,CAFyB,mBAEzBA,CAFyB;;AAIjC,MAAMC,gBAAgB,GAAGN,MAAM,GAAGO,KAAT,CAAe;AACpCC,IAAAA,KAAK,EAAEP,MAAM;AADuB,GAAf,CAAzB;AAQA,MAAMQ,aAAyB,GAAG;AAC9BD,IAAAA,KAAK,EAAE;AADuB,GAAlC;;AAIA,MAAME,QAAQ;AAAA,wEAAG,iBAAOC,MAAP,EAA2BC,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACLJ,cAAAA,KADK,GACKG,MADL,CACLH,KADK;AAEbJ,cAAAA,YAAY,CAACI,KAAD,CAAZ;AACAI,cAAAA,OAAO,CAACC,aAAR,CAAsB,KAAtB;;AAHa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAARH,QAAQ;AAAA;AAAA;AAAA,KAAd;;AAMA,sBACI,QAAC,MAAD;AACI,IAAA,aAAa,EAAED,aADnB;AAEI,IAAA,gBAAgB,EAAEH,gBAFtB;AAGI,IAAA,QAAQ,EAAEI,QAHd;AAAA,cAIK,oBAAM;AACH,0BACI,QAAC,IAAD;AAAA,+BACI,QAAC,KAAD;AAAO,UAAA,EAAE,EAAC,OAAV;AAAkB,UAAA,IAAI,EAAC,OAAvB;AAAA,oBACK,kBAACI,UAAD;AAAA,gCACG,QAAC,KAAD;AACI,cAAA,QAAQ,EAAE,IADd;AAEI,cAAA,WAAW,EAAET,CAAC,CAAC,6BAAD,CAFlB;AAGI,cAAA,SAAS,EAAEV;AAHf,eAIQmB,UAJR;AAAA;AAAA;AAAA;AAAA,qBADH;AAAA;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,eADJ;AAcH;AAnBL;AAAA;AAAA;AAAA;AAAA,WADJ;AAuBH,CA7CD;;GAAMZ,M;UAEYH,c;;;KAFZG,M;AA+CN,eAAeA,MAAf","sourcesContent":["import { Input } from '@applyfuture/ui';\nimport { faSearch } from '@fortawesome/pro-light-svg-icons';\nimport { Field, FieldProps, Form, Formik, FormikHelpers } from 'formik';\nimport useTranslation from 'next-translate/useTranslation';\nimport { FC } from 'react';\nimport { object, string } from 'yup';\n\ntype Props = {\n    handleSearch: (query: string) => void;\n};\n\nconst Search: FC<Props> = (props) => {\n    const { handleSearch } = props;\n    const { t } = useTranslation();\n\n    const validationSchema = object().shape({\n        query: string()\n    });\n\n    type FormValues = {\n        query: string;\n    };\n\n    const initialValues: FormValues = {\n        query: ''\n    };\n\n    const onSubmit = async (values: FormValues, actions: FormikHelpers<FormValues>) => {\n        const { query } = values;\n        handleSearch(query);\n        actions.setSubmitting(false);\n    };\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}>\n            {() => {\n                return (\n                    <Form>\n                        <Field id=\"query\" name=\"query\">\n                            {(fieldProps: FieldProps) => (\n                                <Input\n                                    debounce={2000}\n                                    placeholder={t('programs:search-placeholder')}\n                                    startIcon={faSearch}\n                                    {...fieldProps}\n                                />\n                            )}\n                        </Field>\n                    </Form>\n                );\n            }}\n        </Formik>\n    );\n};\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}
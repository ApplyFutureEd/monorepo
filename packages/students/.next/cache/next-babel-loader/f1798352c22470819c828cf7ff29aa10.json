{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { useEffect } from 'react';\nexport var useOutsideAlerter = function useOutsideAlerter(_ref) {\n  _s();\n\n  var callback = _ref.callback,\n      wrapperRef = _ref.wrapperRef;\n  var current = wrapperRef.current;\n  useEffect(function () {\n    function handleClickOutside(event) {\n      if (current && !current.contains(event.target)) {\n        callback();\n      }\n    }\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return function () {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [wrapperRef, callback]);\n};\n\n_s(useOutsideAlerter, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"sources":["/home/paul/projects/applyfuture/students/node_modules/@applyfuture/utils/src/hooks/useOutsideAlerter.tsx"],"names":["useEffect","useOutsideAlerter","callback","wrapperRef","current","handleClickOutside","event","contains","target","document","addEventListener","removeEventListener"],"mappings":";;AAAA;AACA,SAASA,SAAT,QAA0B,OAA1B;AAOA,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAA4C;AAAA;;AAAA,MAAzCC,QAAyC,QAAzCA,QAAyC;AAAA,MAA/BC,UAA+B,QAA/BA,UAA+B;AACzE,MAAMC,OAAO,GAAGD,UAAU,CAACC,OAA3B;AAEAJ,EAAAA,SAAS,CAAC,YAAM;AACZ,aAASK,kBAAT,CAA4BC,KAA5B,EAA+C;AAC3C,UAAIF,OAAO,IAAI,CAACA,OAAO,CAACG,QAAR,CAAiBD,KAAK,CAACE,MAAvB,CAAhB,EAAgD;AAC5CN,QAAAA,QAAQ;AACX;AACJ;;AAEDO,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCL,kBAAvC;AACA,WAAO,YAAM;AACTI,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CN,kBAA1C;AACH,KAFD;AAGH,GAXQ,EAWN,CAACF,UAAD,EAAaD,QAAb,CAXM,CAAT;AAYH,CAfM;;GAAMD,iB","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { useEffect } from 'react';\n\ntype Params = {\n    callback: () => void;\n    wrapperRef: React.MutableRefObject<null>;\n};\n\nexport const useOutsideAlerter = ({ callback, wrapperRef }: Params): void => {\n    const current = wrapperRef.current as any;\n\n    useEffect(() => {\n        function handleClickOutside(event: MouseEvent) {\n            if (current && !current.contains(event.target)) {\n                callback();\n            }\n        }\n\n        document.addEventListener('mousedown', handleClickOutside);\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        };\n    }, [wrapperRef, callback]);\n};\n\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/paul/projects/applyfuture/students/node_modules/@applyfuture/ui/src/phone-input/PhoneInput.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Tooltip } from '..';\nimport { faExclamationCircle } from '@fortawesome/pro-light-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport cx from 'classnames';\nimport useTranslation from 'next-translate/useTranslation';\nimport { useState } from 'react';\nimport Skeleton from 'react-loading-skeleton';\nimport ReactPhoneNumberInput, { getCountryCallingCode } from 'react-phone-number-input';\nexport const PhoneInput = props => {\n  const {\n    disabled = false,\n    field,\n    form,\n    isLoading = false,\n    label,\n    meta,\n    optional = false,\n    tooltip\n  } = props,\n        rest = _objectWithoutProperties(props, [\"disabled\", \"field\", \"form\", \"isLoading\", \"label\", \"meta\", \"optional\", \"tooltip\"]);\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    0: countryCallingCode,\n    1: setCountryCallingCode\n  } = useState('33');\n  const onError = Boolean((meta === null || meta === void 0 ? void 0 : meta.touched) && (meta === null || meta === void 0 ? void 0 : meta.error));\n  const baseClasses = 'form-input block w-full text-sm leading-5 min-h-input';\n  const disabledClasses = 'bg-gray-100 cursor-not-allowed';\n  const onErrorClasses = 'placeholder-red-300 pr-10 text-red-900 border-red-300 focus:border-red-300 focus:shadow-outline-red';\n  const classes = cx({\n    [`${baseClasses}`]: true,\n    [`${disabledClasses}`]: disabled,\n    [`${onErrorClasses}`]: onError\n  });\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Skeleton, {\n          height: \"15px\",\n          width: \"120px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rounded-md\",\n        children: /*#__PURE__*/_jsxDEV(Skeleton, {\n          height: \"47px\",\n          width: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this);\n  }\n\n  const onChange = phoneNumber => {\n    form.setFieldValue(field.name, phoneNumber);\n  };\n\n  const onCountryChange = country => {\n    if (!country) {\n      return;\n    }\n\n    try {\n      setCountryCallingCode(getCountryCallingCode(country));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"label\", _objectSpread(_objectSpread({\n    className: \"block font-sans\",\n    htmlFor: field.name\n  }, rest), {}, {\n    children: [/*#__PURE__*/_jsxDEV(Tooltip, {\n      content: tooltip,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-gray-700 text-sm font-medium leading-5\",\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), optional && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-gray-500 text-xs\",\n          children: [\" - \", t('common:optional')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative mt-1 rounded-md shadow-sm\",\n      children: [/*#__PURE__*/_jsxDEV(ReactPhoneNumberInput, {\n        className: classes,\n        \"data-testid\": label,\n        defaultCountry: \"FR\",\n        disabled: disabled,\n        name: field.name,\n        placeholder: `+${countryCallingCode}`,\n        value: field.value,\n        onChange: onChange,\n        onCountryChange: onCountryChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), onError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none\",\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"text-red-600\",\n          fixedWidth: true,\n          icon: faExclamationCircle,\n          size: \"1x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), onError && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-2 text-red-600 text-sm\",\n      id: `${field.name}-error`,\n      children: meta === null || meta === void 0 ? void 0 : meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 17\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};","map":{"version":3,"sources":["/home/paul/projects/applyfuture/students/node_modules/@applyfuture/ui/src/phone-input/PhoneInput.tsx"],"names":["Tooltip","faExclamationCircle","FontAwesomeIcon","cx","useTranslation","useState","Skeleton","ReactPhoneNumberInput","getCountryCallingCode","PhoneInput","props","disabled","field","form","isLoading","label","meta","optional","tooltip","rest","t","countryCallingCode","setCountryCallingCode","onError","Boolean","touched","error","baseClasses","disabledClasses","onErrorClasses","classes","onChange","phoneNumber","setFieldValue","name","onCountryChange","country","console","log","value"],"mappings":"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","sourcesContent":["\nimport {Tooltip} from '..';\nimport { faExclamationCircle } from '@fortawesome/pro-light-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport cx from 'classnames';\nimport { FieldInputProps, FieldMetaProps, FormikProps } from 'formik';\nimport useTranslation from 'next-translate/useTranslation';\nimport { FC, ReactNode, useState } from 'react';\nimport Skeleton from 'react-loading-skeleton';\nimport ReactPhoneNumberInput, { getCountryCallingCode } from 'react-phone-number-input';\n\ntype Props = {\n    /**\n     * If `true`, the component element will be disabled.\n     */\n    disabled?: boolean;\n    /**\n     * An object containing `onChange`, `onBlur`, `name`, and `value` of the field.\n     *\n     * https://formik.org/docs/api/useField#fieldinputpropsvalue\n     */\n    field: FieldInputProps<string>;\n    /**\n     * State, handlers, and helpers from the parent form.\n     */\n    form: FormikProps<unknown>;\n    /**\n     * If `true`, the component will display a loading skeleton.\n     */\n    isLoading?: boolean;\n    /**\n     * The label displayed above the input.\n     */\n    label: string;\n    /**\n     * An object that contains relevant computed metadata.\n     *\n     * https://formik.org/docs/api/useField#fieldmetapropsvalue\n     */\n    meta: FieldMetaProps<string>;\n    /**\n     * If `true`, the input will display an `(optional)` mention next to the label.\n     */\n    optional?: boolean;\n\n    /**\n     * The tooltip displayed when hovering the label.\n     */\n    tooltip?: ReactNode;\n};\n\nexport const PhoneInput: FC<Props> = (props) => {\n    const {\n        disabled = false,\n        field,\n        form,\n        isLoading = false,\n        label,\n        meta,\n        optional = false,\n        tooltip,\n        ...rest\n    } = props;\n\n    const { t } = useTranslation();\n    const [countryCallingCode, setCountryCallingCode] = useState('33');\n    const onError = Boolean(meta?.touched && meta?.error);\n\n    const baseClasses = 'form-input block w-full text-sm leading-5 min-h-input';\n    const disabledClasses = 'bg-gray-100 cursor-not-allowed';\n    const onErrorClasses =\n        'placeholder-red-300 pr-10 text-red-900 border-red-300 focus:border-red-300 focus:shadow-outline-red';\n\n    const classes = cx({\n        [`${baseClasses}`]: true,\n        [`${disabledClasses}`]: disabled,\n        [`${onErrorClasses}`]: onError\n    });\n\n    if (isLoading) {\n        return (\n            <div>\n                <div>\n                    <Skeleton height=\"15px\" width=\"120px\" />\n                </div>\n                <div className=\"rounded-md\">\n                    <Skeleton height=\"47px\" width=\"100%\" />\n                </div>\n            </div>\n        );\n    }\n\n    const onChange = (phoneNumber: string) => {\n        form.setFieldValue(field.name, phoneNumber);\n    };\n\n    const onCountryChange = (country: string | undefined) => {\n        if (!country) {\n            return;\n        }\n        try {\n            setCountryCallingCode(getCountryCallingCode(country));\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    return (\n        <label className=\"block font-sans\" htmlFor={field.name} {...rest}>\n            <Tooltip content={tooltip}>\n                <div>\n                    <span className=\"text-gray-700 text-sm font-medium leading-5\">{label}</span>\n                    {optional && (\n                        <span className=\"text-gray-500 text-xs\"> - {t('common:optional')}</span>\n                    )}\n                </div>\n            </Tooltip>\n            <div className=\"relative mt-1 rounded-md shadow-sm\">\n                <ReactPhoneNumberInput\n                    className={classes}\n                    data-testid={label}\n                    defaultCountry=\"FR\"\n                    disabled={disabled}\n                    name={field.name}\n                    placeholder={`+${countryCallingCode}`}\n                    value={field.value}\n                    onChange={onChange}\n                    onCountryChange={onCountryChange}\n                />\n                {onError && (\n                    <div className=\"absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none\">\n                        <FontAwesomeIcon\n                            className=\"text-red-600\"\n                            fixedWidth={true}\n                            icon={faExclamationCircle}\n                            size=\"1x\"\n                        />\n                    </div>\n                )}\n            </div>\n            {onError && (\n                <p className=\"mt-2 text-red-600 text-sm\" id={`${field.name}-error`}>\n                    {meta?.error}\n                </p>\n            )}\n        </label>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}
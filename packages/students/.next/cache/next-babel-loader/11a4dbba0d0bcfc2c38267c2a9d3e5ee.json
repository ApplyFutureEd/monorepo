{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { cities } from '../forms/cities';\nimport { supportedCountries } from '../forms/countries';\nimport { degrees } from '../forms/degrees';\nimport { disciplines } from '../forms/disciplines';\nexport const englishSpeakingCountries = ['EN', 'US', 'GB', 'CA', 'AU', 'ZA', 'IE', 'NZ'];\nexport const frenchSpeakingCountries = ['FR', 'BE'];\n\nconst cartesian = (...args) => {\n  const result = [];\n  const max = args.length - 1;\n\n  const helper = (arr, i) => {\n    for (let j = 0, l = args[i].length; j < l; j++) {\n      const a = arr.slice(0);\n      a.push(args[i][j]);\n\n      if (i === max) {\n        result.push(a);\n      } else {\n        helper(a, i + 1);\n      }\n    }\n  };\n\n  helper([], 0);\n  return result;\n};\n\nconst generateOrConditions = array => {\n  return array.map(subArray => {\n    let conditions = {};\n    subArray.forEach(element => {\n      if (supportedCountries.map(country => country.value).includes(element)) {\n        conditions = _objectSpread(_objectSpread({}, conditions), {}, {\n          country: {\n            eq: element\n          }\n        });\n      }\n\n      if (cities.map(city => city.label).includes(element)) {\n        conditions = _objectSpread(_objectSpread({}, conditions), {}, {\n          city: {\n            eq: element\n          }\n        });\n      }\n\n      if (disciplines.map(discipline => discipline.value).includes(element)) {\n        conditions = _objectSpread(_objectSpread({}, conditions), {}, {\n          discipline: {\n            eq: element\n          }\n        });\n      }\n\n      if (degrees.map(degree => degree.value).includes(element)) {\n        conditions = _objectSpread(_objectSpread({}, conditions), {}, {\n          degree: {\n            eq: element\n          }\n        });\n      }\n    });\n    return conditions;\n  });\n};\n\nexport const createFilter = values => {\n  let newFilter = {\n    published: {\n      eq: true\n    }\n  };\n  let fee = {};\n  let applicationFee = {};\n\n  const hasFullfiledOneEnglishTest = () => {\n    if (Number(values.testToefl) > 0 || Number(values.testIelts) > 0 || Number(values.testToeic) > 0 || Number(values.testCambridgeFirst) > 0 || Number(values.testCambridgeAdvanced) > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const hasFullfiledOneFrenchTest = () => {\n    if (Number(values.testTcftef) > 0 || Number(values.testDelfdalf) > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const hasFullfiledOneLogicAndReasoningTest = () => {\n    if (Number(values.testGre) > 0 || Number(values.testGmat) > 0 || Number(values.testTagemage) > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n  const params = [values.countries, values.cities, values.disciplines, values.degrees].filter(p => (p === null || p === void 0 ? void 0 : p.length) > 0);\n\n  if ((params === null || params === void 0 ? void 0 : params.length) > 0) {\n    const cartesianValues = cartesian(...params);\n    const orConditions = generateOrConditions(cartesianValues);\n\n    if ((orConditions === null || orConditions === void 0 ? void 0 : orConditions.length) > 0) {\n      newFilter = _objectSpread(_objectSpread({}, newFilter), {}, {\n        or: orConditions\n      });\n    }\n  }\n\n  if (values.intake) {\n    newFilter = _objectSpread(_objectSpread({}, newFilter), {}, {\n      intakes: {\n        eq: values.intake\n      }\n    });\n  }\n\n  if (values.minTuitionFee > 0) {\n    fee = {\n      gte: values.minTuitionFee\n    };\n  }\n\n  if (values.maxTuitionFee > 0) {\n    fee = _objectSpread(_objectSpread({}, fee), {}, {\n      lte: values.maxTuitionFee\n    });\n  }\n\n  if (values.minTuitionFee || values.maxTuitionFee) {\n    newFilter = _objectSpread(_objectSpread({}, newFilter), {}, {\n      fee: _objectSpread({}, fee)\n    });\n  }\n\n  if (values.maxTuitionFee === 0) {\n    newFilter = _objectSpread(_objectSpread({}, newFilter), {}, {\n      fee: {\n        eq: 0\n      }\n    });\n  }\n\n  if (values.minApplicationFee) {\n    applicationFee = {\n      gte: Number(values.minApplicationFee)\n    };\n  }\n\n  if (values.maxApplicationFee) {\n    applicationFee = _objectSpread(_objectSpread({}, fee), {}, {\n      lte: Number(values.maxApplicationFee)\n    });\n  }\n\n  if (values.minApplicationFee || values.maxApplicationFee) {\n    newFilter = _objectSpread(_objectSpread({}, newFilter), {}, {\n      applicationFee\n    });\n  }\n\n  if (values.maxApplicationFee === 0) {\n    newFilter = _objectSpread(_objectSpread({}, newFilter), {}, {\n      applicationFee: {\n        eq: 0\n      }\n    });\n  }\n\n  if (Number(values.highestEducationLevel) > 0) {\n    newFilter = _objectSpread(_objectSpread({}, newFilter), {}, {\n      highestEducationLevel: {\n        lte: Number(values.highestEducationLevel)\n      }\n    });\n  }\n\n  if (Number(values.gradePointAverage) > 0) {\n    newFilter = _objectSpread(_objectSpread({}, newFilter), {}, {\n      gradePointAverage: {\n        lte: Number(values.gradePointAverage)\n      }\n    });\n  }\n\n  if (Number(values.testToefl) > 0 || hasFullfiledOneFrenchTest() || hasFullfiledOneLogicAndReasoningTest()) {\n    newFilter = _objectSpread(_objectSpread({}, newFilter), {}, {\n      testToefl: {\n        lte: Number(values.testToefl)\n      }\n    });\n  }\n\n  if (Number(values.testIelts) > 0 || hasFullfiledOneFrenchTest() || hasFullfiledOneLogicAndReasoningTest()) {\n    newFilter = _objectSpread(_objectSpread({}, newFilter), {}, {\n      testIelts: {\n        lte: Number(values.testIelts)\n      }\n    });\n  }\n\n  if (Number(values.testToeic) > 0 || hasFullfiledOneFrenchTest() || hasFullfiledOneLogicAndReasoningTest()) {\n    newFilter = _objectSpread(_objectSpread({}, newFilter), {}, {\n      testToeic: {\n        lte: Number(values.testToeic)\n      }\n    });\n  }\n\n  if (Number(values.testCambridgeFirst) > 0 || hasFullfiledOneFrenchTest() || hasFullfiledOneLogicAndReasoningTest()) {\n    newFilter = _objectSpread(_objectSpread({}, newFilter), {}, {\n      testCambridgeFirst: {\n        lte: Number(values.testCambridgeFirst)\n      }\n    });\n  }\n\n  if (Number(values.testCambridgeAdvanced) > 0 || hasFullfiledOneFrenchTest() || hasFullfiledOneLogicAndReasoningTest()) {\n    newFilter = _objectSpread(_objectSpread({}, newFilter), {}, {\n      testCambridgeAdvanced: {\n        lte: Number(values.testCambridgeAdvanced)\n      }\n    });\n  }\n\n  if (Number(values.testTcftef) > 0 || hasFullfiledOneEnglishTest() || hasFullfiledOneLogicAndReasoningTest()) {\n    newFilter = _objectSpread(_objectSpread({}, newFilter), {}, {\n      testTcftef: {\n        lte: Number(values.testTcftef)\n      }\n    });\n  }\n\n  if (Number(values.testDelfdalf) > 0 || hasFullfiledOneEnglishTest() || hasFullfiledOneLogicAndReasoningTest()) {\n    newFilter = _objectSpread(_objectSpread({}, newFilter), {}, {\n      testDelfdalf: {\n        lte: Number(values.testDelfdalf)\n      }\n    });\n  }\n\n  if (Number(values.testGre) > 0 || hasFullfiledOneEnglishTest() || hasFullfiledOneFrenchTest()) {\n    newFilter = _objectSpread(_objectSpread({}, newFilter), {}, {\n      testGre: {\n        lte: Number(values.testGre)\n      }\n    });\n  }\n\n  if (Number(values.testGmat) > 0 || hasFullfiledOneEnglishTest() || hasFullfiledOneFrenchTest()) {\n    newFilter = _objectSpread(_objectSpread({}, newFilter), {}, {\n      testGmat: {\n        lte: Number(values.testGmat)\n      }\n    });\n  }\n\n  if (Number(values.testTagemage) > 0 || hasFullfiledOneEnglishTest() || hasFullfiledOneFrenchTest()) {\n    newFilter = _objectSpread(_objectSpread({}, newFilter), {}, {\n      testTagemage: {\n        lte: Number(values.testTagemage)\n      }\n    });\n  }\n\n  if (hasFullfiledOneEnglishTest()) {\n    if (Number(values.testToefl) <= 0 && newFilter.testToefl) {\n      delete newFilter.testToefl;\n    }\n\n    if (Number(values.testIelts) <= 0 && newFilter.testIelts) {\n      delete newFilter.testIelts;\n    }\n\n    if (Number(values.testToeic) <= 0 && newFilter.testToeic) {\n      delete newFilter.testToeic;\n    }\n\n    if (Number(values.testCambridgeFirst) <= 0 && newFilter.testCambridgeFirst) {\n      delete newFilter.testCambridgeFirst;\n    }\n\n    if (Number(values.testCambridgeAdvanced) <= 0 && newFilter.testCambridgeAdvanced) {\n      delete newFilter.testCambridgeAdvanced;\n    }\n  }\n\n  if (hasFullfiledOneFrenchTest()) {\n    if (Number(values.testTcftef) <= 0 && newFilter.testTcftef) {\n      delete newFilter.testTcftef;\n    }\n\n    if (Number(values.testDelfdalf) <= 0 && newFilter.testDelfdalf) {\n      delete newFilter.testDelfdalf;\n    }\n  }\n\n  if (hasFullfiledOneLogicAndReasoningTest()) {\n    if (Number(values.testGre) <= 0 && newFilter.testGre) {\n      delete newFilter.testGre;\n    }\n\n    if (Number(values.testGmat) <= 0 && newFilter.testGmat) {\n      delete newFilter.testGmat;\n    }\n\n    if (Number(values.testTagemage) <= 0 && newFilter.testTagemage) {\n      delete newFilter.testTagemage;\n    }\n  }\n\n  if (englishSpeakingCountries.includes(values.nationality) || englishSpeakingCountries.includes(values.educationCountry) || englishSpeakingCountries.includes(values.firstLanguage)) {\n    if (newFilter.testToefl) {\n      delete newFilter.testCambridgeFirst;\n    }\n\n    if (newFilter.testIelts) {\n      delete newFilter.testIelts;\n    }\n\n    if (newFilter.testToeic) {\n      delete newFilter.testToeic;\n    }\n\n    if (newFilter.testCambridgeFirst) {\n      delete newFilter.testCambridgeFirst;\n    }\n\n    if (newFilter.testCambridgeAdvanced) {\n      delete newFilter.testCambridgeAdvanced;\n    }\n  }\n\n  if (frenchSpeakingCountries.includes(values.nationality) || frenchSpeakingCountries.includes(values.educationCountry) || frenchSpeakingCountries.includes(values.firstLanguage)) {\n    if (newFilter.testTcftef) {\n      delete newFilter.testTcftef;\n    }\n\n    if (newFilter.testDelfdalf) {\n      delete newFilter.testDelfdalf;\n    }\n  }\n\n  return newFilter;\n};","map":{"version":3,"sources":["/home/paul/projects/applyfuture/students/node_modules/@applyfuture/utils/src/helpers/filters.ts"],"names":["cities","supportedCountries","degrees","disciplines","englishSpeakingCountries","frenchSpeakingCountries","cartesian","args","result","max","length","helper","arr","i","j","l","a","slice","push","generateOrConditions","array","map","subArray","conditions","forEach","element","country","value","includes","eq","city","label","discipline","degree","createFilter","values","newFilter","published","fee","applicationFee","hasFullfiledOneEnglishTest","Number","testToefl","testIelts","testToeic","testCambridgeFirst","testCambridgeAdvanced","hasFullfiledOneFrenchTest","testTcftef","testDelfdalf","hasFullfiledOneLogicAndReasoningTest","testGre","testGmat","testTagemage","params","countries","filter","p","cartesianValues","orConditions","or","intake","intakes","minTuitionFee","gte","maxTuitionFee","lte","minApplicationFee","maxApplicationFee","highestEducationLevel","gradePointAverage","nationality","educationCountry","firstLanguage"],"mappings":"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","sourcesContent":["import { cities } from '../forms/cities';\nimport { supportedCountries } from '../forms/countries';\nimport { degrees } from '../forms/degrees';\nimport { disciplines } from '../forms/disciplines';\n\nexport const englishSpeakingCountries = ['EN', 'US', 'GB', 'CA', 'AU', 'ZA', 'IE', 'NZ'];\n\nexport const frenchSpeakingCountries = ['FR', 'BE'];\n\nconst cartesian = (...args: any[]) => {\n    const result: any[] = [];\n    const max = args.length - 1;\n    const helper = (arr: any[], i: number) => {\n        for (let j = 0, l = args[i].length; j < l; j++) {\n            const a = arr.slice(0);\n            a.push(args[i][j]);\n            if (i === max) {\n                result.push(a);\n            } else {\n                helper(a, i + 1);\n            }\n        }\n    };\n    helper([], 0);\n    return result;\n};\n\nconst generateOrConditions = (array: string[][]) => {\n    return array.map((subArray) => {\n        let conditions: any = {};\n        subArray.forEach((element) => {\n            if (supportedCountries.map((country) => country.value).includes(element)) {\n                conditions = { ...conditions, country: { eq: element } };\n            }\n            if (cities.map((city) => city.label).includes(element)) {\n                conditions = { ...conditions, city: { eq: element } };\n            }\n            if (disciplines.map((discipline) => discipline.value).includes(element)) {\n                conditions = { ...conditions, discipline: { eq: element } };\n            }\n            if (degrees.map((degree) => degree.value).includes(element)) {\n                conditions = { ...conditions, degree: { eq: element } };\n            }\n        });\n        return conditions;\n    });\n};\n\nexport const createFilter = (values: any) => {\n    let newFilter: any = { published: { eq: true } };\n    let fee: any = {};\n    let applicationFee: any = {};\n\n    const hasFullfiledOneEnglishTest = () => {\n        if (\n            Number(values.testToefl) > 0 ||\n            Number(values.testIelts) > 0 ||\n            Number(values.testToeic) > 0 ||\n            Number(values.testCambridgeFirst) > 0 ||\n            Number(values.testCambridgeAdvanced) > 0\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    const hasFullfiledOneFrenchTest = () => {\n        if (Number(values.testTcftef) > 0 || Number(values.testDelfdalf) > 0) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    const hasFullfiledOneLogicAndReasoningTest = () => {\n        if (\n            Number(values.testGre) > 0 ||\n            Number(values.testGmat) > 0 ||\n            Number(values.testTagemage) > 0\n        ) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    const params = [values.countries, values.cities, values.disciplines, values.degrees].filter(\n        (p) => p?.length > 0\n    );\n\n    if (params?.length > 0) {\n        const cartesianValues = cartesian(...params);\n\n        const orConditions = generateOrConditions(cartesianValues);\n\n        if (orConditions?.length > 0) {\n            newFilter = {\n                ...newFilter,\n                or: orConditions\n            };\n        }\n    }\n\n    if (values.intake) {\n        newFilter = {\n            ...newFilter,\n            intakes: {\n                eq: values.intake\n            }\n        };\n    }\n\n    if (values.minTuitionFee > 0) {\n        fee = { gte: values.minTuitionFee };\n    }\n    if (values.maxTuitionFee > 0) {\n        fee = { ...fee, lte: values.maxTuitionFee };\n    }\n\n    if (values.minTuitionFee || values.maxTuitionFee) {\n        newFilter = {\n            ...newFilter,\n            fee: { ...fee }\n        };\n    }\n\n    if (values.maxTuitionFee === 0) {\n        newFilter = {\n            ...newFilter,\n            fee: { eq: 0 }\n        };\n    }\n\n    if (values.minApplicationFee) {\n        applicationFee = { gte: Number(values.minApplicationFee) };\n    }\n    if (values.maxApplicationFee) {\n        applicationFee = { ...fee, lte: Number(values.maxApplicationFee) };\n    }\n\n    if (values.minApplicationFee || values.maxApplicationFee) {\n        newFilter = {\n            ...newFilter,\n            applicationFee\n        };\n    }\n\n    if (values.maxApplicationFee === 0) {\n        newFilter = {\n            ...newFilter,\n            applicationFee: { eq: 0 }\n        };\n    }\n\n    if (Number(values.highestEducationLevel) > 0) {\n        newFilter = {\n            ...newFilter,\n            highestEducationLevel: {\n                lte: Number(values.highestEducationLevel)\n            }\n        };\n    }\n\n    if (Number(values.gradePointAverage) > 0) {\n        newFilter = {\n            ...newFilter,\n            gradePointAverage: {\n                lte: Number(values.gradePointAverage)\n            }\n        };\n    }\n\n    if (\n        Number(values.testToefl) > 0 ||\n        hasFullfiledOneFrenchTest() ||\n        hasFullfiledOneLogicAndReasoningTest()\n    ) {\n        newFilter = {\n            ...newFilter,\n            testToefl: {\n                lte: Number(values.testToefl)\n            }\n        };\n    }\n\n    if (\n        Number(values.testIelts) > 0 ||\n        hasFullfiledOneFrenchTest() ||\n        hasFullfiledOneLogicAndReasoningTest()\n    ) {\n        newFilter = {\n            ...newFilter,\n            testIelts: {\n                lte: Number(values.testIelts)\n            }\n        };\n    }\n\n    if (\n        Number(values.testToeic) > 0 ||\n        hasFullfiledOneFrenchTest() ||\n        hasFullfiledOneLogicAndReasoningTest()\n    ) {\n        newFilter = {\n            ...newFilter,\n            testToeic: {\n                lte: Number(values.testToeic)\n            }\n        };\n    }\n\n    if (\n        Number(values.testCambridgeFirst) > 0 ||\n        hasFullfiledOneFrenchTest() ||\n        hasFullfiledOneLogicAndReasoningTest()\n    ) {\n        newFilter = {\n            ...newFilter,\n            testCambridgeFirst: {\n                lte: Number(values.testCambridgeFirst)\n            }\n        };\n    }\n\n    if (\n        Number(values.testCambridgeAdvanced) > 0 ||\n        hasFullfiledOneFrenchTest() ||\n        hasFullfiledOneLogicAndReasoningTest()\n    ) {\n        newFilter = {\n            ...newFilter,\n            testCambridgeAdvanced: {\n                lte: Number(values.testCambridgeAdvanced)\n            }\n        };\n    }\n\n    if (\n        Number(values.testTcftef) > 0 ||\n        hasFullfiledOneEnglishTest() ||\n        hasFullfiledOneLogicAndReasoningTest()\n    ) {\n        newFilter = {\n            ...newFilter,\n            testTcftef: {\n                lte: Number(values.testTcftef)\n            }\n        };\n    }\n\n    if (\n        Number(values.testDelfdalf) > 0 ||\n        hasFullfiledOneEnglishTest() ||\n        hasFullfiledOneLogicAndReasoningTest()\n    ) {\n        newFilter = {\n            ...newFilter,\n            testDelfdalf: {\n                lte: Number(values.testDelfdalf)\n            }\n        };\n    }\n\n    if (Number(values.testGre) > 0 || hasFullfiledOneEnglishTest() || hasFullfiledOneFrenchTest()) {\n        newFilter = {\n            ...newFilter,\n            testGre: {\n                lte: Number(values.testGre)\n            }\n        };\n    }\n\n    if (\n        Number(values.testGmat) > 0 ||\n        hasFullfiledOneEnglishTest() ||\n        hasFullfiledOneFrenchTest()\n    ) {\n        newFilter = {\n            ...newFilter,\n            testGmat: {\n                lte: Number(values.testGmat)\n            }\n        };\n    }\n\n    if (\n        Number(values.testTagemage) > 0 ||\n        hasFullfiledOneEnglishTest() ||\n        hasFullfiledOneFrenchTest()\n    ) {\n        newFilter = {\n            ...newFilter,\n            testTagemage: {\n                lte: Number(values.testTagemage)\n            }\n        };\n    }\n\n    if (hasFullfiledOneEnglishTest()) {\n        if (Number(values.testToefl) <= 0 && newFilter.testToefl) {\n            delete newFilter.testToefl;\n        }\n        if (Number(values.testIelts) <= 0 && newFilter.testIelts) {\n            delete newFilter.testIelts;\n        }\n        if (Number(values.testToeic) <= 0 && newFilter.testToeic) {\n            delete newFilter.testToeic;\n        }\n        if (Number(values.testCambridgeFirst) <= 0 && newFilter.testCambridgeFirst) {\n            delete newFilter.testCambridgeFirst;\n        }\n        if (Number(values.testCambridgeAdvanced) <= 0 && newFilter.testCambridgeAdvanced) {\n            delete newFilter.testCambridgeAdvanced;\n        }\n    }\n\n    if (hasFullfiledOneFrenchTest()) {\n        if (Number(values.testTcftef) <= 0 && newFilter.testTcftef) {\n            delete newFilter.testTcftef;\n        }\n        if (Number(values.testDelfdalf) <= 0 && newFilter.testDelfdalf) {\n            delete newFilter.testDelfdalf;\n        }\n    }\n\n    if (hasFullfiledOneLogicAndReasoningTest()) {\n        if (Number(values.testGre) <= 0 && newFilter.testGre) {\n            delete newFilter.testGre;\n        }\n        if (Number(values.testGmat) <= 0 && newFilter.testGmat) {\n            delete newFilter.testGmat;\n        }\n        if (Number(values.testTagemage) <= 0 && newFilter.testTagemage) {\n            delete newFilter.testTagemage;\n        }\n    }\n\n    if (\n        englishSpeakingCountries.includes(values.nationality) ||\n        englishSpeakingCountries.includes(values.educationCountry) ||\n        englishSpeakingCountries.includes(values.firstLanguage)\n    ) {\n        if (newFilter.testToefl) {\n            delete newFilter.testCambridgeFirst;\n        }\n        if (newFilter.testIelts) {\n            delete newFilter.testIelts;\n        }\n        if (newFilter.testToeic) {\n            delete newFilter.testToeic;\n        }\n        if (newFilter.testCambridgeFirst) {\n            delete newFilter.testCambridgeFirst;\n        }\n        if (newFilter.testCambridgeAdvanced) {\n            delete newFilter.testCambridgeAdvanced;\n        }\n    }\n\n    if (\n        frenchSpeakingCountries.includes(values.nationality) ||\n        frenchSpeakingCountries.includes(values.educationCountry) ||\n        frenchSpeakingCountries.includes(values.firstLanguage)\n    ) {\n        if (newFilter.testTcftef) {\n            delete newFilter.testTcftef;\n        }\n        if (newFilter.testDelfdalf) {\n            delete newFilter.testDelfdalf;\n        }\n    }\n\n    return newFilter;\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable @typescript-eslint/ban-types */\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { isArray, mergeWith } from 'lodash';\nimport { useState } from 'react';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\n\nconst customizer = (objValue, srcValue) => {\n  if (isArray(objValue)) {\n    return objValue.concat(srcValue);\n  }\n};\n\nexport const useQuery = (query, variables) => {\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(true);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const {\n    0: data,\n    1: setData\n  } = useState({});\n\n  const fetchQuery = async (query, variables, nextToken) => {\n    try {\n      setIsLoading(true);\n      const {\n        data\n      } = await API.graphql(graphqlOperation(query, _objectSpread(_objectSpread({}, variables), {}, {\n        nextToken\n      })));\n\n      if (nextToken) {\n        setData(prevData => mergeWith(prevData, data, customizer));\n      } else {\n        setData(data);\n      }\n    } catch (error) {\n      setError(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const fetchMore = nextToken => {\n    fetchQuery(query, variables, nextToken);\n  };\n\n  const refetch = () => {\n    fetchQuery(query, variables);\n  };\n\n  useDeepCompareEffect(() => {\n    fetchQuery(query, variables);\n  }, [query, variables]);\n  return {\n    data,\n    error,\n    fetchMore,\n    isLoading,\n    refetch\n  };\n};","map":{"version":3,"sources":["/home/paul/projects/applyfuture/students/node_modules/@applyfuture/utils/src/hooks/useQuery.tsx"],"names":["API","graphqlOperation","isArray","mergeWith","useState","useDeepCompareEffect","customizer","objValue","srcValue","concat","useQuery","query","variables","isLoading","setIsLoading","error","setError","data","setData","fetchQuery","nextToken","graphql","prevData","fetchMore","refetch"],"mappings":";;;;;;AAAA;AACA,SAASA,GAAT,EAAcC,gBAAd,QAAsC,aAAtC;AACA,SAASC,OAAT,EAAkBC,SAAlB,QAAmC,QAAnC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;;AAUA,MAAMC,UAAU,GAAG,CAACC,QAAD,EAAgBC,QAAhB,KAAkC;AACjD,MAAIN,OAAO,CAACK,QAAD,CAAX,EAAuB;AACnB,WAAOA,QAAQ,CAACE,MAAT,CAAgBD,QAAhB,CAAP;AACH;AACJ,CAJD;;AAMA,OAAO,MAAME,QAAQ,GAAG,CACpBC,KADoB,EAEpBC,SAFoB,KAGO;AAC3B,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BV,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM;AAAA,OAACW,KAAD;AAAA,OAAQC;AAAR,MAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACa,IAAD;AAAA,OAAOC;AAAP,MAAkBd,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMe,UAAU,GAAG,OAAOR,KAAP,EAAsBC,SAAtB,EAAiDQ,SAAjD,KAAwE;AACvF,QAAI;AACAN,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,YAAM;AAAEG,QAAAA;AAAF,UAAY,MAAMjB,GAAG,CAACqB,OAAJ,CACpBpB,gBAAgB,CAACU,KAAD,kCAAaC,SAAb;AAAwBQ,QAAAA;AAAxB,SADI,CAAxB;;AAKA,UAAIA,SAAJ,EAAe;AACXF,QAAAA,OAAO,CAAEI,QAAD,IAAcnB,SAAS,CAACmB,QAAD,EAAWL,IAAX,EAAiBX,UAAjB,CAAxB,CAAP;AACH,OAFD,MAEO;AACHY,QAAAA,OAAO,CAACD,IAAD,CAAP;AACH;AACJ,KAZD,CAYE,OAAOF,KAAP,EAAc;AACZC,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,KAdD,SAcU;AACND,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,GAlBD;;AAoBA,QAAMS,SAAS,GAAIH,SAAD,IAAuB;AACrCD,IAAAA,UAAU,CAACR,KAAD,EAAQC,SAAR,EAAmBQ,SAAnB,CAAV;AACH,GAFD;;AAIA,QAAMI,OAAO,GAAG,MAAM;AAClBL,IAAAA,UAAU,CAACR,KAAD,EAAQC,SAAR,CAAV;AACH,GAFD;;AAIAP,EAAAA,oBAAoB,CAAC,MAAM;AACvBc,IAAAA,UAAU,CAACR,KAAD,EAAQC,SAAR,CAAV;AACH,GAFmB,EAEjB,CAACD,KAAD,EAAQC,SAAR,CAFiB,CAApB;AAIA,SAAO;AACHK,IAAAA,IADG;AAEHF,IAAAA,KAFG;AAGHQ,IAAAA,SAHG;AAIHV,IAAAA,SAJG;AAKHW,IAAAA;AALG,GAAP;AAOH,CA/CM","sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { isArray, mergeWith } from 'lodash';\nimport { useState } from 'react';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\n\ntype UseQueryType<ResultType> = {\n    data: ResultType;\n    error: any;\n    fetchMore: (nextToken: string) => void;\n    isLoading: boolean;\n    refetch: () => void;\n};\n\nconst customizer = (objValue: any, srcValue: any) => {\n    if (isArray(objValue)) {\n        return objValue.concat(srcValue);\n    }\n};\n\nexport const useQuery = <ResultType extends {}, VariablesType extends {} = {}>(\n    query: string,\n    variables?: VariablesType\n): UseQueryType<ResultType> => {\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState('');\n    const [data, setData] = useState({} as ResultType);\n\n    const fetchQuery = async (query: string, variables?: VariablesType, nextToken?: string) => {\n        try {\n            setIsLoading(true);\n            const { data } = (await API.graphql(\n                graphqlOperation(query, { ...variables, nextToken })\n            )) as {\n                data: ResultType;\n            };\n            if (nextToken) {\n                setData((prevData) => mergeWith(prevData, data, customizer));\n            } else {\n                setData(data);\n            }\n        } catch (error) {\n            setError(error);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const fetchMore = (nextToken: string) => {\n        fetchQuery(query, variables, nextToken);\n    };\n\n    const refetch = () => {\n        fetchQuery(query, variables);\n    };\n\n    useDeepCompareEffect(() => {\n        fetchQuery(query, variables);\n    }, [query, variables]);\n\n    return {\n        data,\n        error,\n        fetchMore,\n        isLoading,\n        refetch\n    };\n};\n"]},"metadata":{},"sourceType":"module"}
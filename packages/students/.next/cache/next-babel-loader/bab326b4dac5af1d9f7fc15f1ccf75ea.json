{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/paul/projects/applyfuture/students/packages/students/src/components/core/input/Input.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport Tooltip from '@components/core/tooltip/Tooltip';\nimport { faExclamationCircle } from '@fortawesome/pro-light-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport cx from 'classnames';\nimport useTranslation from 'next-translate/useTranslation';\nimport { useState } from 'react';\nimport Skeleton from 'react-loading-skeleton';\nimport { useDebouncedCallback } from 'use-debounce';\n\nconst Input = props => {\n  const {\n    autoCapitalize = 'on',\n    debounce,\n    disabled = false,\n    field,\n    form,\n    isLoading = false,\n    label,\n    max,\n    meta,\n    min,\n    optional = false,\n    placeholder = '',\n    rows = 0,\n    startIcon,\n    step,\n    tooltip,\n    type = 'text'\n  } = props,\n        rest = _objectWithoutProperties(props, [\"autoCapitalize\", \"debounce\", \"disabled\", \"field\", \"form\", \"isLoading\", \"label\", \"max\", \"meta\", \"min\", \"optional\", \"placeholder\", \"rows\", \"startIcon\", \"step\", \"tooltip\", \"type\"]);\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    0: debouncedValue,\n    1: setDebouncedValue\n  } = useState('');\n  const debounced = useDebouncedCallback(value => {\n    form.setFieldValue(field.name, value);\n    form.submitForm();\n  }, debounce);\n  const onError = Boolean((meta === null || meta === void 0 ? void 0 : meta.touched) && (meta === null || meta === void 0 ? void 0 : meta.error));\n  const withStartIcon = Boolean(startIcon);\n  const withDebounce = Boolean(debounce);\n  const baseClasses = 'form-input block w-full text-sm leading-5 min-h-input';\n  const disabledClasses = 'bg-gray-100 cursor-not-allowed';\n  const onErrorClasses = 'placeholder-red-300 pr-10 text-red-900 border-red-300 focus:border-red-300 focus:shadow-outline-red';\n  const withLabelClasses = 'mt-1';\n  const withStartIconClasses = 'pl-9';\n  const classes = cx({\n    [`${baseClasses}`]: true,\n    [`${disabledClasses}`]: disabled,\n    [`${onErrorClasses}`]: onError,\n    [`${withStartIconClasses}`]: withStartIcon\n  });\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Skeleton, {\n          height: \"15px\",\n          width: \"120px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rounded-md\",\n        children: /*#__PURE__*/_jsxDEV(Skeleton, {\n          height: \"47px\",\n          width: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this);\n  }\n\n  const onDebouncedChange = event => {\n    const {\n      value\n    } = event.target;\n    setDebouncedValue(value);\n    debounced.callback(value);\n  };\n\n  const value = withDebounce ? debouncedValue : field.value;\n  const onChange = withDebounce ? onDebouncedChange : field.onChange;\n  return /*#__PURE__*/_jsxDEV(\"label\", _objectSpread(_objectSpread({\n    className: \"block font-sans\",\n    htmlFor: field.name\n  }, rest), {}, {\n    children: [label && /*#__PURE__*/_jsxDEV(Tooltip, {\n      content: tooltip,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-gray-700 text-sm font-medium leading-5\",\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }, this), optional && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-gray-500 text-xs\",\n          children: [\" - \", t('common:optional')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cx({\n        ['relative rounded-md shadow-sm']: true,\n        [`${withLabelClasses}`]: label\n      }),\n      children: [startIcon && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none\",\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"text-gray-700\",\n          fixedWidth: true,\n          icon: startIcon,\n          size: \"1x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, this), rows ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n        autoCapitalize: autoCapitalize,\n        className: classes,\n        disabled: disabled,\n        id: field.name,\n        name: field.name,\n        placeholder: placeholder,\n        rows: rows,\n        value: value,\n        onBlur: field.onBlur,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n        autoCapitalize: autoCapitalize,\n        className: classes,\n        disabled: disabled,\n        id: field.name,\n        max: max,\n        min: min,\n        name: field.name,\n        placeholder: placeholder,\n        step: step,\n        type: type,\n        value: value,\n        onBlur: field.onBlur,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 21\n      }, this), onError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none\",\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"text-red-600\",\n          fixedWidth: true,\n          icon: faExclamationCircle,\n          size: \"1x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), onError && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-2 text-red-600 text-sm\",\n      id: `${field.name}-error`,\n      children: meta === null || meta === void 0 ? void 0 : meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 17\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 9\n  }, this);\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/paul/projects/applyfuture/students/packages/students/src/components/core/input/Input.tsx"],"names":["Tooltip","faExclamationCircle","FontAwesomeIcon","cx","useTranslation","useState","Skeleton","useDebouncedCallback","Input","props","autoCapitalize","debounce","disabled","field","form","isLoading","label","max","meta","min","optional","placeholder","rows","startIcon","step","tooltip","type","rest","t","debouncedValue","setDebouncedValue","debounced","value","setFieldValue","name","submitForm","onError","Boolean","touched","error","withStartIcon","withDebounce","baseClasses","disabledClasses","onErrorClasses","withLabelClasses","withStartIconClasses","classes","onDebouncedChange","event","target","callback","onChange","onBlur"],"mappings":"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","sourcesContent":["import Tooltip from '@components/core/tooltip/Tooltip';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport { faExclamationCircle } from '@fortawesome/pro-light-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport cx from 'classnames';\nimport { FieldInputProps, FieldMetaProps, FormikProps } from 'formik';\nimport useTranslation from 'next-translate/useTranslation';\nimport { ChangeEvent, FC, ReactNode, useState } from 'react';\nimport Skeleton from 'react-loading-skeleton';\nimport { useDebouncedCallback } from 'use-debounce';\n\ntype Props = {\n    /**\n     * Controls whether and how text input is automatically capitalized as it is entered/edited by the user.\n     */\n    autoCapitalize?: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters';\n    /**\n     * Delay in milliseconds after which the value is updated and submitted.\n     */\n    debounce?: number;\n    /**\n     * If `true`, the component element will be disabled.\n     */\n    disabled?: boolean;\n    /**\n     * An object containing `onChange`, `onBlur`, `name`, and `value` of the field.\n     *\n     * https://formik.org/docs/api/useField#fieldinputpropsvalue\n     */\n    field: FieldInputProps<string>;\n    /**\n     * State, handlers, and helpers from the parent form.\n     */\n    form: FormikProps<any>;\n    /**\n     * If `true`, the component will display a loading skeleton.\n     */\n    isLoading?: boolean;\n    /**\n     * The label displayed above the input.\n     */\n    label?: string;\n    /**\n     * The maximum value accepted when input type is set to `number`.\n     */\n    max?: number;\n    /**\n     * An object that contains relevant computed metadata.\n     *\n     * https://formik.org/docs/api/useField#fieldmetapropsvalue\n     */\n    meta: FieldMetaProps<string>;\n    /**\n     * The minimum value accepted when input type is set to `number`.\n     */\n    min?: number;\n    /**\n     * If `true`, the input will display an `(optional)` mention next to the label.\n     */\n    optional?: boolean;\n    /**\n     * The short hint displayed in the input before the user enters a value.\n     */\n    placeholder?: string;\n    /**\n     * Number of rows to display when multiline option is set to `true`.\n     */\n    rows?: number;\n    /**\n     * The icon displayed inside the input before the typed value.\n     */\n    startIcon?: IconProp;\n    /**\n     * The step attribute specifies the interval between legal numbers\n     */\n    step?: number | string;\n    /**\n     * The tooltip displayed when hovering the label.\n     */\n    tooltip?: ReactNode;\n    /**\n     * The type to use.\n     */\n    type?: 'text' | 'number' | 'password';\n};\n\nconst Input: FC<Props> = (props) => {\n    const {\n        autoCapitalize = 'on',\n        debounce,\n        disabled = false,\n        field,\n        form,\n        isLoading = false,\n        label,\n        max,\n        meta,\n        min,\n        optional = false,\n        placeholder = '',\n        rows = 0,\n        startIcon,\n        step,\n        tooltip,\n        type = 'text',\n        ...rest\n    } = props;\n\n    const { t } = useTranslation();\n    const [debouncedValue, setDebouncedValue] = useState('');\n    const debounced = useDebouncedCallback((value: string) => {\n        form.setFieldValue(field.name, value);\n        form.submitForm();\n    }, debounce);\n\n    const onError = Boolean(meta?.touched && meta?.error);\n    const withStartIcon = Boolean(startIcon);\n    const withDebounce = Boolean(debounce);\n\n    const baseClasses = 'form-input block w-full text-sm leading-5 min-h-input';\n    const disabledClasses = 'bg-gray-100 cursor-not-allowed';\n    const onErrorClasses =\n        'placeholder-red-300 pr-10 text-red-900 border-red-300 focus:border-red-300 focus:shadow-outline-red';\n    const withLabelClasses = 'mt-1';\n    const withStartIconClasses = 'pl-9';\n\n    const classes = cx({\n        [`${baseClasses}`]: true,\n        [`${disabledClasses}`]: disabled,\n        [`${onErrorClasses}`]: onError,\n        [`${withStartIconClasses}`]: withStartIcon\n    });\n\n    if (isLoading) {\n        return (\n            <div>\n                <div>\n                    <Skeleton height=\"15px\" width=\"120px\" />\n                </div>\n                <div className=\"rounded-md\">\n                    <Skeleton height=\"47px\" width=\"100%\" />\n                </div>\n            </div>\n        );\n    }\n\n    const onDebouncedChange = (\n        event: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLTextAreaElement>\n    ) => {\n        const { value } = event.target;\n        setDebouncedValue(value);\n        debounced.callback(value);\n    };\n\n    const value = withDebounce ? debouncedValue : field.value;\n    const onChange = withDebounce ? onDebouncedChange : field.onChange;\n\n    return (\n        <label className=\"block font-sans\" htmlFor={field.name} {...rest}>\n            {label && (\n                <Tooltip content={tooltip}>\n                    <div>\n                        <span className=\"text-gray-700 text-sm font-medium leading-5\">{label}</span>\n                        {optional && (\n                            <span className=\"text-gray-500 text-xs\"> - {t('common:optional')}</span>\n                        )}\n                    </div>\n                </Tooltip>\n            )}\n            <div\n                className={cx({\n                    ['relative rounded-md shadow-sm']: true,\n                    [`${withLabelClasses}`]: label\n                })}>\n                {startIcon && (\n                    <div className=\"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none\">\n                        <FontAwesomeIcon\n                            className=\"text-gray-700\"\n                            fixedWidth={true}\n                            icon={startIcon}\n                            size=\"1x\"\n                        />\n                    </div>\n                )}\n                {rows ? (\n                    <textarea\n                        autoCapitalize={autoCapitalize}\n                        className={classes}\n                        disabled={disabled}\n                        id={field.name}\n                        name={field.name}\n                        placeholder={placeholder}\n                        rows={rows}\n                        value={value}\n                        onBlur={field.onBlur}\n                        onChange={onChange}\n                    />\n                ) : (\n                    <input\n                        autoCapitalize={autoCapitalize}\n                        className={classes}\n                        disabled={disabled}\n                        id={field.name}\n                        max={max}\n                        min={min}\n                        name={field.name}\n                        placeholder={placeholder}\n                        step={step}\n                        type={type}\n                        value={value}\n                        onBlur={field.onBlur}\n                        onChange={onChange}\n                    />\n                )}\n                {onError && (\n                    <div className=\"absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none\">\n                        <FontAwesomeIcon\n                            className=\"text-red-600\"\n                            fixedWidth={true}\n                            icon={faExclamationCircle}\n                            size=\"1x\"\n                        />\n                    </div>\n                )}\n            </div>\n            {onError && (\n                <p className=\"mt-2 text-red-600 text-sm\" id={`${field.name}-error`}>\n                    {meta?.error}\n                </p>\n            )}\n        </label>\n    );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}
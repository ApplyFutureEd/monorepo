{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/paul/projects/applyfuture/students/packages/students/src/components/landing/contact/ContactForm.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Button from '@components/core/button/Button';\nimport Input from '@components/core/input/Input';\nimport { faCheck, faPaperPlane } from '@fortawesome/pro-light-svg-icons';\nimport { API } from 'aws-amplify';\nimport { Field, Form, Formik } from 'formik';\nimport useTranslation from 'next-translate/useTranslation';\nimport { useState } from 'react';\nimport { object, string } from 'yup';\n\nconst ContactForm = () => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    0: submitted,\n    1: setSubmitted\n  } = useState(false);\n  const {\n    0: errorMessage,\n    1: setErrorMessage\n  } = useState('');\n  const validationSchema = object().shape({\n    email: string().required(t('common:error-email-required')).email(t('common:error-email-format')),\n    firstName: string().required(t('common:error-required')),\n    lastName: string().required(t('common:error-required')),\n    message: string().required(t('common:error-required'))\n  });\n  const initialValues = {\n    email: '',\n    firstName: '',\n    lastName: '',\n    message: ''\n  };\n\n  const onSubmit = async (values, actions) => {\n    try {\n      await API.post('REST', '/ses/contact-form', {\n        body: values\n      });\n      actions.setSubmitting(false);\n      setSubmitted(true);\n    } catch (error) {\n      setErrorMessage(t('landing:contact-form-error'));\n      actions.setSubmitting(false);\n      setSubmitted(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: onSubmit,\n    children: props => {\n      const {\n        isSubmitting\n      } = props;\n      return /*#__PURE__*/_jsxDEV(Form, {\n        className: \"grid gap-y-6 grid-cols-1\",\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          id: \"email\",\n          name: \"email\",\n          children: fieldProps => /*#__PURE__*/_jsxDEV(Input, _objectSpread({\n            label: t('landing:contact-form-email')\n          }, fieldProps), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex space-x-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex-grow\",\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              id: \"firstName\",\n              name: \"firstName\",\n              children: fieldProps => /*#__PURE__*/_jsxDEV(Input, _objectSpread({\n                label: t('landing:contact-form-first-name')\n              }, fieldProps), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex-grow\",\n            children: /*#__PURE__*/_jsxDEV(Field, {\n              id: \"lastName\",\n              name: \"lastName\",\n              children: fieldProps => /*#__PURE__*/_jsxDEV(Input, _objectSpread({\n                label: t('landing:contact-form-last-name')\n              }, fieldProps), void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          id: \"message\",\n          name: \"message\",\n          children: fieldProps => /*#__PURE__*/_jsxDEV(Input, _objectSpread({\n            label: t('landing:contact-form-message'),\n            rows: 5\n          }, fieldProps), void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center justify-end\",\n          children: submitted ? /*#__PURE__*/_jsxDEV(Button, {\n            startIcon: faCheck,\n            variant: \"success\",\n            children: t('landing:contact-form-email-sent')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 33\n          }, this) : /*#__PURE__*/_jsxDEV(Button, {\n            disabled: isSubmitting,\n            isLoading: isSubmitting,\n            startIcon: faPaperPlane,\n            type: \"submit\",\n            variant: \"primary\",\n            children: t('landing:contact-form-submit-button')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mt-2 text-red-600 text-sm\",\n          children: errorMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\nexport default ContactForm;","map":{"version":3,"sources":["/home/paul/projects/applyfuture/students/packages/students/src/components/landing/contact/ContactForm.tsx"],"names":["Button","Input","faCheck","faPaperPlane","API","Field","Form","Formik","useTranslation","useState","object","string","ContactForm","t","submitted","setSubmitted","errorMessage","setErrorMessage","validationSchema","shape","email","required","firstName","lastName","message","initialValues","onSubmit","values","actions","post","body","setSubmitting","error","props","isSubmitting","fieldProps"],"mappings":"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","sourcesContent":["import Button from '@components/core/button/Button';\nimport Input from '@components/core/input/Input';\nimport { faCheck, faPaperPlane } from '@fortawesome/pro-light-svg-icons';\nimport { API } from 'aws-amplify';\nimport { Field, FieldProps, Form, Formik, FormikHelpers } from 'formik';\nimport useTranslation from 'next-translate/useTranslation';\nimport { FC, useState } from 'react';\nimport { object, string } from 'yup';\n\nconst ContactForm: FC = () => {\n    const { t } = useTranslation();\n    const [submitted, setSubmitted] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    const validationSchema = object().shape({\n        email: string()\n            .required(t('common:error-email-required'))\n            .email(t('common:error-email-format')),\n        firstName: string().required(t('common:error-required')),\n        lastName: string().required(t('common:error-required')),\n        message: string().required(t('common:error-required'))\n    });\n\n    type FormValues = {\n        email: string;\n        firstName: string;\n        lastName: string;\n        message: string;\n    };\n\n    const initialValues: FormValues = {\n        email: '',\n        firstName: '',\n        lastName: '',\n        message: ''\n    };\n\n    const onSubmit = async (values: FormValues, actions: FormikHelpers<FormValues>) => {\n        try {\n            await API.post('REST', '/ses/contact-form', {\n                body: values\n            });\n            actions.setSubmitting(false);\n            setSubmitted(true);\n        } catch (error) {\n            setErrorMessage(t('landing:contact-form-error'));\n            actions.setSubmitting(false);\n            setSubmitted(false);\n        }\n    };\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}>\n            {(props) => {\n                const { isSubmitting } = props;\n\n                return (\n                    <Form className=\"grid gap-y-6 grid-cols-1\">\n                        <Field id=\"email\" name=\"email\">\n                            {(fieldProps: FieldProps) => (\n                                <Input label={t('landing:contact-form-email')} {...fieldProps} />\n                            )}\n                        </Field>\n                        <div className=\"flex space-x-4\">\n                            <div className=\"flex-grow\">\n                                <Field id=\"firstName\" name=\"firstName\">\n                                    {(fieldProps: FieldProps) => (\n                                        <Input\n                                            label={t('landing:contact-form-first-name')}\n                                            {...fieldProps}\n                                        />\n                                    )}\n                                </Field>\n                            </div>\n                            <div className=\"flex-grow\">\n                                <Field id=\"lastName\" name=\"lastName\">\n                                    {(fieldProps: FieldProps) => (\n                                        <Input\n                                            label={t('landing:contact-form-last-name')}\n                                            {...fieldProps}\n                                        />\n                                    )}\n                                </Field>\n                            </div>\n                        </div>\n                        <Field id=\"message\" name=\"message\">\n                            {(fieldProps: FieldProps) => (\n                                <Input\n                                    label={t('landing:contact-form-message')}\n                                    rows={5}\n                                    {...fieldProps}\n                                />\n                            )}\n                        </Field>\n                        <div className=\"flex items-center justify-end\">\n                            {submitted ? (\n                                <Button startIcon={faCheck} variant=\"success\">\n                                    {t('landing:contact-form-email-sent')}\n                                </Button>\n                            ) : (\n                                <Button\n                                    disabled={isSubmitting}\n                                    isLoading={isSubmitting}\n                                    startIcon={faPaperPlane}\n                                    type=\"submit\"\n                                    variant=\"primary\">\n                                    {t('landing:contact-form-submit-button')}\n                                </Button>\n                            )}\n                        </div>\n                        {errorMessage && (\n                            <p className=\"mt-2 text-red-600 text-sm\">{errorMessage}</p>\n                        )}\n                    </Form>\n                );\n            }}\n        </Formik>\n    );\n};\n\nexport default ContactForm;\n"]},"metadata":{},"sourceType":"module"}
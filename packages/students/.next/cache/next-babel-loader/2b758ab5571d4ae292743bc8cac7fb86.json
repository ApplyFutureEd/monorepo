{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/home/paul/projects/applyfuture/students/node_modules/@applyfuture/ui/src/input/Input.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Tooltip } from '..';\nimport { faExclamationCircle } from '@fortawesome/pro-light-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport cx from 'classnames';\nimport useTranslation from 'next-translate/useTranslation';\nimport { useState } from 'react';\nimport Skeleton from 'react-loading-skeleton';\nimport { useDebouncedCallback } from 'use-debounce';\nexport var Input = function Input(props) {\n  _s();\n\n  var _cx, _cx2;\n\n  var _props$autoCapitalize = props.autoCapitalize,\n      autoCapitalize = _props$autoCapitalize === void 0 ? 'on' : _props$autoCapitalize,\n      debounce = props.debounce,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      field = props.field,\n      form = props.form,\n      _props$isLoading = props.isLoading,\n      isLoading = _props$isLoading === void 0 ? false : _props$isLoading,\n      label = props.label,\n      max = props.max,\n      meta = props.meta,\n      min = props.min,\n      _props$optional = props.optional,\n      optional = _props$optional === void 0 ? false : _props$optional,\n      _props$placeholder = props.placeholder,\n      placeholder = _props$placeholder === void 0 ? '' : _props$placeholder,\n      _props$rows = props.rows,\n      rows = _props$rows === void 0 ? 0 : _props$rows,\n      startIcon = props.startIcon,\n      step = props.step,\n      tooltip = props.tooltip,\n      _props$type = props.type,\n      type = _props$type === void 0 ? 'text' : _props$type,\n      rest = _objectWithoutProperties(props, [\"autoCapitalize\", \"debounce\", \"disabled\", \"field\", \"form\", \"isLoading\", \"label\", \"max\", \"meta\", \"min\", \"optional\", \"placeholder\", \"rows\", \"startIcon\", \"step\", \"tooltip\", \"type\"]);\n\n  var _useTranslation = useTranslation(),\n      t = _useTranslation.t;\n\n  var _useState = useState(''),\n      debouncedValue = _useState[0],\n      setDebouncedValue = _useState[1];\n\n  var debounced = useDebouncedCallback(function (value) {\n    form.setFieldValue(field.name, value);\n    form.submitForm();\n  }, debounce);\n  var onError = Boolean((meta === null || meta === void 0 ? void 0 : meta.touched) && (meta === null || meta === void 0 ? void 0 : meta.error));\n  var withStartIcon = Boolean(startIcon);\n  var withDebounce = Boolean(debounce);\n  var baseClasses = 'form-input block w-full text-sm leading-5 min-h-input';\n  var disabledClasses = 'bg-gray-100 cursor-not-allowed';\n  var onErrorClasses = 'placeholder-red-300 pr-10 text-red-900 border-red-300 focus:border-red-300 focus:shadow-outline-red';\n  var withLabelClasses = 'mt-1';\n  var withStartIconClasses = 'pl-9';\n  var classes = cx((_cx = {}, _defineProperty(_cx, \"\".concat(baseClasses), true), _defineProperty(_cx, \"\".concat(disabledClasses), disabled), _defineProperty(_cx, \"\".concat(onErrorClasses), onError), _defineProperty(_cx, \"\".concat(withStartIconClasses), withStartIcon), _cx));\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Skeleton, {\n          height: \"15px\",\n          width: \"120px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rounded-md\",\n        children: /*#__PURE__*/_jsxDEV(Skeleton, {\n          height: \"47px\",\n          width: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, _this);\n  }\n\n  var onDebouncedChange = function onDebouncedChange(event) {\n    var value = event.target.value;\n    setDebouncedValue(value);\n    debounced.callback(value);\n  };\n\n  var value = withDebounce ? debouncedValue : field.value;\n  var onChange = withDebounce ? onDebouncedChange : field.onChange;\n  return /*#__PURE__*/_jsxDEV(\"label\", _objectSpread(_objectSpread({\n    className: \"block font-sans\",\n    htmlFor: field.name\n  }, rest), {}, {\n    children: [label && /*#__PURE__*/_jsxDEV(Tooltip, {\n      content: tooltip,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-gray-700 text-sm font-medium leading-5\",\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }, _this), optional && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-gray-500 text-xs\",\n          children: [\" - \", t('common:optional')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 29\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 21\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 17\n    }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: cx((_cx2 = {}, _defineProperty(_cx2, 'relative rounded-md shadow-sm', true), _defineProperty(_cx2, \"\".concat(withLabelClasses), label), _cx2)),\n      children: [startIcon && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none\",\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"text-gray-700\",\n          fixedWidth: true,\n          icon: startIcon,\n          size: \"1x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 25\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }, _this), rows ? /*#__PURE__*/_jsxDEV(\"textarea\", {\n        autoCapitalize: autoCapitalize,\n        className: classes,\n        disabled: disabled,\n        id: field.name,\n        name: field.name,\n        placeholder: placeholder,\n        rows: rows,\n        value: value,\n        onBlur: field.onBlur,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }, _this) : /*#__PURE__*/_jsxDEV(\"input\", {\n        autoCapitalize: autoCapitalize,\n        className: classes,\n        disabled: disabled,\n        id: field.name,\n        max: max,\n        min: min,\n        name: field.name,\n        placeholder: placeholder,\n        step: step,\n        type: type,\n        value: value,\n        onBlur: field.onBlur,\n        onChange: onChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 21\n      }, _this), onError && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none\",\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          className: \"text-red-600\",\n          fixedWidth: true,\n          icon: faExclamationCircle,\n          size: \"1x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 25\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 21\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, _this), onError && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-2 text-red-600 text-sm\",\n      id: \"\".concat(field.name, \"-error\"),\n      children: meta === null || meta === void 0 ? void 0 : meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 17\n    }, _this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Input, \"UbMrvAzuZDSPq3vzw1WahUse9ZI=\", false, function () {\n  return [useTranslation, useDebouncedCallback];\n});\n\n_c = Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/home/paul/projects/applyfuture/students/node_modules/@applyfuture/ui/src/input/Input.tsx"],"names":["Tooltip","faExclamationCircle","FontAwesomeIcon","cx","useTranslation","useState","Skeleton","useDebouncedCallback","Input","props","autoCapitalize","debounce","disabled","field","form","isLoading","label","max","meta","min","optional","placeholder","rows","startIcon","step","tooltip","type","rest","t","debouncedValue","setDebouncedValue","debounced","value","setFieldValue","name","submitForm","onError","Boolean","touched","error","withStartIcon","withDebounce","baseClasses","disabledClasses","onErrorClasses","withLabelClasses","withStartIconClasses","classes","onDebouncedChange","event","target","callback","onChange","onBlur"],"mappings":"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","sourcesContent":["import { Tooltip } from '..';\nimport { IconProp } from '@fortawesome/fontawesome-svg-core';\nimport { faExclamationCircle } from '@fortawesome/pro-light-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport cx from 'classnames';\nimport { FieldInputProps, FieldMetaProps, FormikProps } from 'formik';\nimport useTranslation from 'next-translate/useTranslation';\nimport { ChangeEvent, FC, ReactNode, useState } from 'react';\nimport Skeleton from 'react-loading-skeleton';\nimport { useDebouncedCallback } from 'use-debounce';\n\ntype Props = {\n    /**\n     * Controls whether and how text input is automatically capitalized as it is entered/edited by the user.\n     */\n    autoCapitalize?: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters';\n    /**\n     * Delay in milliseconds after which the value is updated and submitted.\n     */\n    debounce?: number;\n    /**\n     * If `true`, the component element will be disabled.\n     */\n    disabled?: boolean;\n    /**\n     * An object containing `onChange`, `onBlur`, `name`, and `value` of the field.\n     *\n     * https://formik.org/docs/api/useField#fieldinputpropsvalue\n     */\n    field: FieldInputProps<string>;\n    /**\n     * State, handlers, and helpers from the parent form.\n     */\n    form: FormikProps<any>;\n    /**\n     * If `true`, the component will display a loading skeleton.\n     */\n    isLoading?: boolean;\n    /**\n     * The label displayed above the input.\n     */\n    label?: string;\n    /**\n     * The maximum value accepted when input type is set to `number`.\n     */\n    max?: number;\n    /**\n     * An object that contains relevant computed metadata.\n     *\n     * https://formik.org/docs/api/useField#fieldmetapropsvalue\n     */\n    meta: FieldMetaProps<string>;\n    /**\n     * The minimum value accepted when input type is set to `number`.\n     */\n    min?: number;\n    /**\n     * If `true`, the input will display an `(optional)` mention next to the label.\n     */\n    optional?: boolean;\n    /**\n     * The short hint displayed in the input before the user enters a value.\n     */\n    placeholder?: string;\n    /**\n     * Number of rows to display when multiline option is set to `true`.\n     */\n    rows?: number;\n    /**\n     * The icon displayed inside the input before the typed value.\n     */\n    startIcon?: IconProp;\n    /**\n     * The step attribute specifies the interval between legal numbers\n     */\n    step?: number | string;\n    /**\n     * The tooltip displayed when hovering the label.\n     */\n    tooltip?: ReactNode;\n    /**\n     * The type to use.\n     */\n    type?: 'text' | 'number' | 'password';\n};\n\nexport const Input: FC<Props> = (props) => {\n    const {\n        autoCapitalize = 'on',\n        debounce,\n        disabled = false,\n        field,\n        form,\n        isLoading = false,\n        label,\n        max,\n        meta,\n        min,\n        optional = false,\n        placeholder = '',\n        rows = 0,\n        startIcon,\n        step,\n        tooltip,\n        type = 'text',\n        ...rest\n    } = props;\n\n    const { t } = useTranslation();\n    const [debouncedValue, setDebouncedValue] = useState('');\n    const debounced = useDebouncedCallback((value: string) => {\n        form.setFieldValue(field.name, value);\n        form.submitForm();\n    }, debounce);\n\n    const onError = Boolean(meta?.touched && meta?.error);\n    const withStartIcon = Boolean(startIcon);\n    const withDebounce = Boolean(debounce);\n\n    const baseClasses = 'form-input block w-full text-sm leading-5 min-h-input';\n    const disabledClasses = 'bg-gray-100 cursor-not-allowed';\n    const onErrorClasses =\n        'placeholder-red-300 pr-10 text-red-900 border-red-300 focus:border-red-300 focus:shadow-outline-red';\n    const withLabelClasses = 'mt-1';\n    const withStartIconClasses = 'pl-9';\n\n    const classes = cx({\n        [`${baseClasses}`]: true,\n        [`${disabledClasses}`]: disabled,\n        [`${onErrorClasses}`]: onError,\n        [`${withStartIconClasses}`]: withStartIcon\n    });\n\n    if (isLoading) {\n        return (\n            <div>\n                <div>\n                    <Skeleton height=\"15px\" width=\"120px\" />\n                </div>\n                <div className=\"rounded-md\">\n                    <Skeleton height=\"47px\" width=\"100%\" />\n                </div>\n            </div>\n        );\n    }\n\n    const onDebouncedChange = (\n        event: ChangeEvent<HTMLInputElement> | ChangeEvent<HTMLTextAreaElement>\n    ) => {\n        const { value } = event.target;\n        setDebouncedValue(value);\n        debounced.callback(value);\n    };\n\n    const value = withDebounce ? debouncedValue : field.value;\n    const onChange = withDebounce ? onDebouncedChange : field.onChange;\n\n    return (\n        <label className=\"block font-sans\" htmlFor={field.name} {...rest}>\n            {label && (\n                <Tooltip content={tooltip}>\n                    <div>\n                        <span className=\"text-gray-700 text-sm font-medium leading-5\">{label}</span>\n                        {optional && (\n                            <span className=\"text-gray-500 text-xs\"> - {t('common:optional')}</span>\n                        )}\n                    </div>\n                </Tooltip>\n            )}\n            <div\n                className={cx({\n                    ['relative rounded-md shadow-sm']: true,\n                    [`${withLabelClasses}`]: label\n                })}>\n                {startIcon && (\n                    <div className=\"absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none\">\n                        <FontAwesomeIcon\n                            className=\"text-gray-700\"\n                            fixedWidth={true}\n                            icon={startIcon}\n                            size=\"1x\"\n                        />\n                    </div>\n                )}\n                {rows ? (\n                    <textarea\n                        autoCapitalize={autoCapitalize}\n                        className={classes}\n                        disabled={disabled}\n                        id={field.name}\n                        name={field.name}\n                        placeholder={placeholder}\n                        rows={rows}\n                        value={value}\n                        onBlur={field.onBlur}\n                        onChange={onChange}\n                    />\n                ) : (\n                    <input\n                        autoCapitalize={autoCapitalize}\n                        className={classes}\n                        disabled={disabled}\n                        id={field.name}\n                        max={max}\n                        min={min}\n                        name={field.name}\n                        placeholder={placeholder}\n                        step={step}\n                        type={type}\n                        value={value}\n                        onBlur={field.onBlur}\n                        onChange={onChange}\n                    />\n                )}\n                {onError && (\n                    <div className=\"absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none\">\n                        <FontAwesomeIcon\n                            className=\"text-red-600\"\n                            fixedWidth={true}\n                            icon={faExclamationCircle}\n                            size=\"1x\"\n                        />\n                    </div>\n                )}\n            </div>\n            {onError && (\n                <p className=\"mt-2 text-red-600 text-sm\" id={`${field.name}-error`}>\n                    {meta?.error}\n                </p>\n            )}\n        </label>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}